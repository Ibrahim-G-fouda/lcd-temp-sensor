
temp_sensor_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000db8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000db8  00000e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800086  00800086  00000e72  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000029a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecf  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000450  00000000  00000000  000039b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085d  00000000  00000000  00003e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00004664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a2  00000000  00000000  00004878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000893  00000000  00000000  00004b1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <main>
  8a:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
 */ 
#include "prog init.h"
#include "std_macros1.h"
void adc_init(void)
{
	set_bit(ADMUX,REFS0);
  92:	3e 9a       	sbi	0x07, 6	; 7
	
	set_bit(ADMUX,REFS1);// set bit 6,7 in ADMUX register so thar the v ref = 2,65v
  94:	3f 9a       	sbi	0x07, 7	; 7
	set_bit(ADCSRA,ADEN);
  96:	37 9a       	sbi	0x06, 7	; 6
	set_bit(ADCSRA,ADPS2);// set bit 1,2 in ADCSRA so that prescaller = 1/64
  98:	32 9a       	sbi	0x06, 2	; 6
set_bit(ADCSRA,ADPS1);
  9a:	31 9a       	sbi	0x06, 1	; 6
}
  9c:	08 95       	ret

0000009e <adc_read>:
unsigned short adc_read(void)
{
	unsigned short read_val;
	set_bit(ADCSRA,ADSC);   /* you have to read ADCL first then read ADCH or the register will be locked*/
  9e:	36 9a       	sbi	0x06, 6	; 6
	while(read_bit(ADCSRA,ADSC)==1);
  a0:	36 99       	sbic	0x06, 6	; 6
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <adc_read+0x2>
	read_val=ADCL;
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	90 e0       	ldi	r25, 0x00	; 0
	read_val=read_val|(ADCH<<8);
  a8:	45 b1       	in	r20, 0x05	; 5
  aa:	34 2f       	mov	r19, r20
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	82 2b       	or	r24, r18
  b0:	93 2b       	or	r25, r19
	return read_val;
	
  b2:	08 95       	ret

000000b4 <dio_set_pin>:
 */ 
#include <avr/io.h>
#define  F_CPU  8000000Ul
void dio_set_pin(char port,char pin,char dir)
{
	switch (port)
  b4:	84 34       	cpi	r24, 0x44	; 68
  b6:	09 f4       	brne	.+2      	; 0xba <dio_set_pin+0x6>
  b8:	71 c0       	rjmp	.+226    	; 0x19c <dio_set_pin+0xe8>
  ba:	85 34       	cpi	r24, 0x45	; 69
  bc:	48 f4       	brcc	.+18     	; 0xd0 <dio_set_pin+0x1c>
  be:	82 34       	cpi	r24, 0x42	; 66
  c0:	99 f1       	breq	.+102    	; 0x128 <dio_set_pin+0x74>
  c2:	83 34       	cpi	r24, 0x43	; 67
  c4:	08 f0       	brcs	.+2      	; 0xc8 <dio_set_pin+0x14>
  c6:	4d c0       	rjmp	.+154    	; 0x162 <dio_set_pin+0xae>
  c8:	81 34       	cpi	r24, 0x41	; 65
  ca:	09 f0       	breq	.+2      	; 0xce <dio_set_pin+0x1a>
  cc:	83 c0       	rjmp	.+262    	; 0x1d4 <dio_set_pin+0x120>
  ce:	0f c0       	rjmp	.+30     	; 0xee <dio_set_pin+0x3a>
  d0:	82 36       	cpi	r24, 0x62	; 98
  d2:	51 f1       	breq	.+84     	; 0x128 <dio_set_pin+0x74>
  d4:	83 36       	cpi	r24, 0x63	; 99
  d6:	20 f4       	brcc	.+8      	; 0xe0 <dio_set_pin+0x2c>
  d8:	81 36       	cpi	r24, 0x61	; 97
  da:	09 f0       	breq	.+2      	; 0xde <dio_set_pin+0x2a>
  dc:	7b c0       	rjmp	.+246    	; 0x1d4 <dio_set_pin+0x120>
  de:	07 c0       	rjmp	.+14     	; 0xee <dio_set_pin+0x3a>
  e0:	83 36       	cpi	r24, 0x63	; 99
  e2:	09 f4       	brne	.+2      	; 0xe6 <dio_set_pin+0x32>
  e4:	3e c0       	rjmp	.+124    	; 0x162 <dio_set_pin+0xae>
  e6:	84 36       	cpi	r24, 0x64	; 100
  e8:	09 f0       	breq	.+2      	; 0xec <dio_set_pin+0x38>
  ea:	74 c0       	rjmp	.+232    	; 0x1d4 <dio_set_pin+0x120>
  ec:	57 c0       	rjmp	.+174    	; 0x19c <dio_set_pin+0xe8>
	{
		case 'A':
			case 'a':
			if (dir ==1)
  ee:	41 30       	cpi	r20, 0x01	; 1
  f0:	69 f4       	brne	.+26     	; 0x10c <dio_set_pin+0x58>
			{
			DDRA|=(1<<pin);
  f2:	2a b3       	in	r18, 0x1a	; 26
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	ac 01       	movw	r20, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <dio_set_pin+0x4c>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <dio_set_pin+0x48>
 104:	ba 01       	movw	r22, r20
 106:	62 2b       	or	r22, r18
 108:	6a bb       	out	0x1a, r22	; 26
 10a:	08 95       	ret
			}
	else
	{
	DDRA&=(~(1<<pin));	
 10c:	2a b3       	in	r18, 0x1a	; 26
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	ac 01       	movw	r20, r24
 114:	02 c0       	rjmp	.+4      	; 0x11a <dio_set_pin+0x66>
 116:	44 0f       	add	r20, r20
 118:	55 1f       	adc	r21, r21
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <dio_set_pin+0x62>
 11e:	ba 01       	movw	r22, r20
 120:	60 95       	com	r22
 122:	62 23       	and	r22, r18
 124:	6a bb       	out	0x1a, r22	; 26
 126:	08 95       	ret
	}break;
	
	case 'B':
	case 'b':
	if (dir ==1)
 128:	41 30       	cpi	r20, 0x01	; 1
 12a:	69 f4       	brne	.+26     	; 0x146 <dio_set_pin+0x92>
	{
		DDRB|=(1<<pin);
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <dio_set_pin+0x86>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <dio_set_pin+0x82>
 13e:	ba 01       	movw	r22, r20
 140:	62 2b       	or	r22, r18
 142:	67 bb       	out	0x17, r22	; 23
 144:	08 95       	ret
	}
	else
	{
		DDRB&=(~(1<<pin));
 146:	27 b3       	in	r18, 0x17	; 23
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	ac 01       	movw	r20, r24
 14e:	02 c0       	rjmp	.+4      	; 0x154 <dio_set_pin+0xa0>
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <dio_set_pin+0x9c>
 158:	ba 01       	movw	r22, r20
 15a:	60 95       	com	r22
 15c:	62 23       	and	r22, r18
 15e:	67 bb       	out	0x17, r22	; 23
 160:	08 95       	ret
	}break;

case 'C':
case 'c':
if (dir ==1)
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	69 f4       	brne	.+26     	; 0x180 <dio_set_pin+0xcc>
{
	DDRC|=(1<<pin);
 166:	24 b3       	in	r18, 0x14	; 20
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	ac 01       	movw	r20, r24
 16e:	02 c0       	rjmp	.+4      	; 0x174 <dio_set_pin+0xc0>
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <dio_set_pin+0xbc>
 178:	ba 01       	movw	r22, r20
 17a:	62 2b       	or	r22, r18
 17c:	64 bb       	out	0x14, r22	; 20
 17e:	08 95       	ret
}
else
{
	DDRC&=(~(1<<pin));
 180:	24 b3       	in	r18, 0x14	; 20
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	ac 01       	movw	r20, r24
 188:	02 c0       	rjmp	.+4      	; 0x18e <dio_set_pin+0xda>
 18a:	44 0f       	add	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <dio_set_pin+0xd6>
 192:	ba 01       	movw	r22, r20
 194:	60 95       	com	r22
 196:	62 23       	and	r22, r18
 198:	64 bb       	out	0x14, r22	; 20
 19a:	08 95       	ret
}break;
	
	case 'D':
	case 'd':
	if (dir ==1)
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	69 f4       	brne	.+26     	; 0x1ba <dio_set_pin+0x106>
	{
		DDRD|=(1<<pin);
 1a0:	21 b3       	in	r18, 0x11	; 17
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	ac 01       	movw	r20, r24
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <dio_set_pin+0xfa>
 1aa:	44 0f       	add	r20, r20
 1ac:	55 1f       	adc	r21, r21
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <dio_set_pin+0xf6>
 1b2:	ba 01       	movw	r22, r20
 1b4:	62 2b       	or	r22, r18
 1b6:	61 bb       	out	0x11, r22	; 17
 1b8:	08 95       	ret
	}
	else
	{
		DDRD&=(~(1<<pin));
 1ba:	21 b3       	in	r18, 0x11	; 17
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	ac 01       	movw	r20, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <dio_set_pin+0x114>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <dio_set_pin+0x110>
 1cc:	ba 01       	movw	r22, r20
 1ce:	60 95       	com	r22
 1d0:	62 23       	and	r22, r18
 1d2:	61 bb       	out	0x11, r22	; 17
 1d4:	08 95       	ret

000001d6 <dio_write_pin>:
	break;
}
	}
	void dio_write_pin(char port,char pin,char val)
	{
		switch(port)
 1d6:	84 34       	cpi	r24, 0x44	; 68
 1d8:	09 f4       	brne	.+2      	; 0x1dc <dio_write_pin+0x6>
 1da:	71 c0       	rjmp	.+226    	; 0x2be <dio_write_pin+0xe8>
 1dc:	85 34       	cpi	r24, 0x45	; 69
 1de:	48 f4       	brcc	.+18     	; 0x1f2 <dio_write_pin+0x1c>
 1e0:	82 34       	cpi	r24, 0x42	; 66
 1e2:	99 f1       	breq	.+102    	; 0x24a <dio_write_pin+0x74>
 1e4:	83 34       	cpi	r24, 0x43	; 67
 1e6:	08 f0       	brcs	.+2      	; 0x1ea <dio_write_pin+0x14>
 1e8:	4d c0       	rjmp	.+154    	; 0x284 <dio_write_pin+0xae>
 1ea:	81 34       	cpi	r24, 0x41	; 65
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <dio_write_pin+0x1a>
 1ee:	83 c0       	rjmp	.+262    	; 0x2f6 <dio_write_pin+0x120>
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <dio_write_pin+0x3a>
 1f2:	82 36       	cpi	r24, 0x62	; 98
 1f4:	51 f1       	breq	.+84     	; 0x24a <dio_write_pin+0x74>
 1f6:	83 36       	cpi	r24, 0x63	; 99
 1f8:	20 f4       	brcc	.+8      	; 0x202 <dio_write_pin+0x2c>
 1fa:	81 36       	cpi	r24, 0x61	; 97
 1fc:	09 f0       	breq	.+2      	; 0x200 <dio_write_pin+0x2a>
 1fe:	7b c0       	rjmp	.+246    	; 0x2f6 <dio_write_pin+0x120>
 200:	07 c0       	rjmp	.+14     	; 0x210 <dio_write_pin+0x3a>
 202:	83 36       	cpi	r24, 0x63	; 99
 204:	09 f4       	brne	.+2      	; 0x208 <dio_write_pin+0x32>
 206:	3e c0       	rjmp	.+124    	; 0x284 <dio_write_pin+0xae>
 208:	84 36       	cpi	r24, 0x64	; 100
 20a:	09 f0       	breq	.+2      	; 0x20e <dio_write_pin+0x38>
 20c:	74 c0       	rjmp	.+232    	; 0x2f6 <dio_write_pin+0x120>
 20e:	57 c0       	rjmp	.+174    	; 0x2be <dio_write_pin+0xe8>
	{
		case  'A':
		case 'a':
		if (val==1)
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	69 f4       	brne	.+26     	; 0x22e <dio_write_pin+0x58>
		{
		PORTA=PORTA|(1<<pin);
 214:	2b b3       	in	r18, 0x1b	; 27
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	ac 01       	movw	r20, r24
 21c:	02 c0       	rjmp	.+4      	; 0x222 <dio_write_pin+0x4c>
 21e:	44 0f       	add	r20, r20
 220:	55 1f       	adc	r21, r21
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <dio_write_pin+0x48>
 226:	ba 01       	movw	r22, r20
 228:	62 2b       	or	r22, r18
 22a:	6b bb       	out	0x1b, r22	; 27
 22c:	08 95       	ret
		}
	else
	{
		PORTA=PORTA & (~(1<<pin));
 22e:	2b b3       	in	r18, 0x1b	; 27
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <dio_write_pin+0x66>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <dio_write_pin+0x62>
 240:	ba 01       	movw	r22, r20
 242:	60 95       	com	r22
 244:	62 23       	and	r22, r18
 246:	6b bb       	out	0x1b, r22	; 27
 248:	08 95       	ret
	}break;
	case  'B':
	case 'b':
	if (val==1)
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	69 f4       	brne	.+26     	; 0x268 <dio_write_pin+0x92>
	{
		PORTB=PORTB|(1<<pin);
 24e:	28 b3       	in	r18, 0x18	; 24
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	ac 01       	movw	r20, r24
 256:	02 c0       	rjmp	.+4      	; 0x25c <dio_write_pin+0x86>
 258:	44 0f       	add	r20, r20
 25a:	55 1f       	adc	r21, r21
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <dio_write_pin+0x82>
 260:	ba 01       	movw	r22, r20
 262:	62 2b       	or	r22, r18
 264:	68 bb       	out	0x18, r22	; 24
 266:	08 95       	ret
	}
	else
	{
		PORTB=PORTB & (~(1<<pin));
 268:	28 b3       	in	r18, 0x18	; 24
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <dio_write_pin+0xa0>
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <dio_write_pin+0x9c>
 27a:	ba 01       	movw	r22, r20
 27c:	60 95       	com	r22
 27e:	62 23       	and	r22, r18
 280:	68 bb       	out	0x18, r22	; 24
 282:	08 95       	ret
	}break;
	case 'C':
	case 'c':
	if (val==1)
 284:	41 30       	cpi	r20, 0x01	; 1
 286:	69 f4       	brne	.+26     	; 0x2a2 <dio_write_pin+0xcc>
	{
		PORTC =PORTC |(1<<pin);
 288:	25 b3       	in	r18, 0x15	; 21
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	ac 01       	movw	r20, r24
 290:	02 c0       	rjmp	.+4      	; 0x296 <dio_write_pin+0xc0>
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <dio_write_pin+0xbc>
 29a:	ba 01       	movw	r22, r20
 29c:	62 2b       	or	r22, r18
 29e:	65 bb       	out	0x15, r22	; 21
 2a0:	08 95       	ret
	}
	else
	{
		PORTC =PORTC  & (~(1<<pin));
 2a2:	25 b3       	in	r18, 0x15	; 21
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	ac 01       	movw	r20, r24
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <dio_write_pin+0xda>
 2ac:	44 0f       	add	r20, r20
 2ae:	55 1f       	adc	r21, r21
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <dio_write_pin+0xd6>
 2b4:	ba 01       	movw	r22, r20
 2b6:	60 95       	com	r22
 2b8:	62 23       	and	r22, r18
 2ba:	65 bb       	out	0x15, r22	; 21
 2bc:	08 95       	ret
	}break;
	case 'D':
	case 'd':
	if (val==1)
 2be:	41 30       	cpi	r20, 0x01	; 1
 2c0:	69 f4       	brne	.+26     	; 0x2dc <dio_write_pin+0x106>
	{
		PORTD =PORTD |(1<<pin);
 2c2:	22 b3       	in	r18, 0x12	; 18
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	ac 01       	movw	r20, r24
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <dio_write_pin+0xfa>
 2cc:	44 0f       	add	r20, r20
 2ce:	55 1f       	adc	r21, r21
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <dio_write_pin+0xf6>
 2d4:	ba 01       	movw	r22, r20
 2d6:	62 2b       	or	r22, r18
 2d8:	62 bb       	out	0x12, r22	; 18
 2da:	08 95       	ret
	}
	else
	{
		PORTD =PORTD  & (~(1<<pin));
 2dc:	22 b3       	in	r18, 0x12	; 18
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	ac 01       	movw	r20, r24
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <dio_write_pin+0x114>
 2e6:	44 0f       	add	r20, r20
 2e8:	55 1f       	adc	r21, r21
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <dio_write_pin+0x110>
 2ee:	ba 01       	movw	r22, r20
 2f0:	60 95       	com	r22
 2f2:	62 23       	and	r22, r18
 2f4:	62 bb       	out	0x12, r22	; 18
 2f6:	08 95       	ret

000002f8 <dio_read_pin>:
	}	
	}
		unsigned char dio_read_pin(	unsigned char port,	unsigned char pin)
		{
		unsigned char val ;
		switch(port)
 2f8:	84 34       	cpi	r24, 0x44	; 68
 2fa:	b1 f1       	breq	.+108    	; 0x368 <dio_read_pin+0x70>
 2fc:	85 34       	cpi	r24, 0x45	; 69
 2fe:	38 f4       	brcc	.+14     	; 0x30e <dio_read_pin+0x16>
 300:	82 34       	cpi	r24, 0x42	; 66
 302:	e1 f0       	breq	.+56     	; 0x33c <dio_read_pin+0x44>
 304:	83 34       	cpi	r24, 0x43	; 67
 306:	28 f5       	brcc	.+74     	; 0x352 <dio_read_pin+0x5a>
 308:	81 34       	cpi	r24, 0x41	; 65
 30a:	c1 f5       	brne	.+112    	; 0x37c <dio_read_pin+0x84>
 30c:	0c c0       	rjmp	.+24     	; 0x326 <dio_read_pin+0x2e>
 30e:	82 36       	cpi	r24, 0x62	; 98
 310:	a9 f0       	breq	.+42     	; 0x33c <dio_read_pin+0x44>
 312:	83 36       	cpi	r24, 0x63	; 99
 314:	18 f4       	brcc	.+6      	; 0x31c <dio_read_pin+0x24>
 316:	81 36       	cpi	r24, 0x61	; 97
 318:	89 f5       	brne	.+98     	; 0x37c <dio_read_pin+0x84>
 31a:	05 c0       	rjmp	.+10     	; 0x326 <dio_read_pin+0x2e>
 31c:	83 36       	cpi	r24, 0x63	; 99
 31e:	c9 f0       	breq	.+50     	; 0x352 <dio_read_pin+0x5a>
 320:	84 36       	cpi	r24, 0x64	; 100
 322:	61 f5       	brne	.+88     	; 0x37c <dio_read_pin+0x84>
 324:	21 c0       	rjmp	.+66     	; 0x368 <dio_read_pin+0x70>
		{
		case 'A':
		case 'a':	
		val =((PINA>>pin)&1);
 326:	29 b3       	in	r18, 0x19	; 25
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	c9 01       	movw	r24, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <dio_read_pin+0x3a>
 32e:	95 95       	asr	r25
 330:	87 95       	ror	r24
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <dio_read_pin+0x36>
 336:	98 2f       	mov	r25, r24
 338:	91 70       	andi	r25, 0x01	; 1
		break;
 33a:	20 c0       	rjmp	.+64     	; 0x37c <dio_read_pin+0x84>
		case  'B':
		case 'b':
		val =((PINB>>pin)&1);
 33c:	26 b3       	in	r18, 0x16	; 22
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	c9 01       	movw	r24, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <dio_read_pin+0x50>
 344:	95 95       	asr	r25
 346:	87 95       	ror	r24
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <dio_read_pin+0x4c>
 34c:	98 2f       	mov	r25, r24
 34e:	91 70       	andi	r25, 0x01	; 1
			break;;
 350:	15 c0       	rjmp	.+42     	; 0x37c <dio_read_pin+0x84>
		case  'C':
		case 'c':
		val =((PINC>>pin)&1);
 352:	23 b3       	in	r18, 0x13	; 19
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	c9 01       	movw	r24, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <dio_read_pin+0x66>
 35a:	95 95       	asr	r25
 35c:	87 95       	ror	r24
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <dio_read_pin+0x62>
 362:	98 2f       	mov	r25, r24
 364:	91 70       	andi	r25, 0x01	; 1
			break;
 366:	0a c0       	rjmp	.+20     	; 0x37c <dio_read_pin+0x84>
			case  'D':
			case 'd':
			val =((PIND>>pin)&1);
 368:	20 b3       	in	r18, 0x10	; 16
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	c9 01       	movw	r24, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <dio_read_pin+0x7c>
 370:	95 95       	asr	r25
 372:	87 95       	ror	r24
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <dio_read_pin+0x78>
 378:	98 2f       	mov	r25, r24
 37a:	91 70       	andi	r25, 0x01	; 1
			default:
			break;
		
		}
		return val;
				}		
 37c:	89 2f       	mov	r24, r25
 37e:	08 95       	ret

00000380 <dio_toggle_pin>:
				void dio_toggle_pin(char port,char pin)
				{
					switch (port)
 380:	84 34       	cpi	r24, 0x44	; 68
 382:	09 f4       	brne	.+2      	; 0x386 <dio_toggle_pin+0x6>
 384:	3d c0       	rjmp	.+122    	; 0x400 <dio_toggle_pin+0x80>
 386:	85 34       	cpi	r24, 0x45	; 69
 388:	40 f4       	brcc	.+16     	; 0x39a <dio_toggle_pin+0x1a>
 38a:	82 34       	cpi	r24, 0x42	; 66
 38c:	f9 f0       	breq	.+62     	; 0x3cc <dio_toggle_pin+0x4c>
 38e:	83 34       	cpi	r24, 0x43	; 67
 390:	50 f5       	brcc	.+84     	; 0x3e6 <dio_toggle_pin+0x66>
 392:	81 34       	cpi	r24, 0x41	; 65
 394:	09 f0       	breq	.+2      	; 0x398 <dio_toggle_pin+0x18>
 396:	40 c0       	rjmp	.+128    	; 0x418 <dio_toggle_pin+0x98>
 398:	0c c0       	rjmp	.+24     	; 0x3b2 <dio_toggle_pin+0x32>
 39a:	82 36       	cpi	r24, 0x62	; 98
 39c:	b9 f0       	breq	.+46     	; 0x3cc <dio_toggle_pin+0x4c>
 39e:	83 36       	cpi	r24, 0x63	; 99
 3a0:	18 f4       	brcc	.+6      	; 0x3a8 <dio_toggle_pin+0x28>
 3a2:	81 36       	cpi	r24, 0x61	; 97
 3a4:	c9 f5       	brne	.+114    	; 0x418 <dio_toggle_pin+0x98>
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <dio_toggle_pin+0x32>
 3a8:	83 36       	cpi	r24, 0x63	; 99
 3aa:	e9 f0       	breq	.+58     	; 0x3e6 <dio_toggle_pin+0x66>
 3ac:	84 36       	cpi	r24, 0x64	; 100
 3ae:	a1 f5       	brne	.+104    	; 0x418 <dio_toggle_pin+0x98>
 3b0:	27 c0       	rjmp	.+78     	; 0x400 <dio_toggle_pin+0x80>
					{
					case 'A':
					case 'a':
					PORTA=PORTA^(1<<pin);
 3b2:	2b b3       	in	r18, 0x1b	; 27
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	ac 01       	movw	r20, r24
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <dio_toggle_pin+0x40>
 3bc:	44 0f       	add	r20, r20
 3be:	55 1f       	adc	r21, r21
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <dio_toggle_pin+0x3c>
 3c4:	ba 01       	movw	r22, r20
 3c6:	62 27       	eor	r22, r18
 3c8:	6b bb       	out	0x1b, r22	; 27
					break;
 3ca:	08 95       	ret
					case 'b':
					case 'B':
					PORTB=PORTB^(1<<pin);
 3cc:	28 b3       	in	r18, 0x18	; 24
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	ac 01       	movw	r20, r24
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <dio_toggle_pin+0x5a>
 3d6:	44 0f       	add	r20, r20
 3d8:	55 1f       	adc	r21, r21
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <dio_toggle_pin+0x56>
 3de:	ba 01       	movw	r22, r20
 3e0:	62 27       	eor	r22, r18
 3e2:	68 bb       	out	0x18, r22	; 24
					break;
 3e4:	08 95       	ret
					case 'C':
					case 'c':
					PORTC=PORTC^(1<<pin);
 3e6:	25 b3       	in	r18, 0x15	; 21
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	ac 01       	movw	r20, r24
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <dio_toggle_pin+0x74>
 3f0:	44 0f       	add	r20, r20
 3f2:	55 1f       	adc	r21, r21
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <dio_toggle_pin+0x70>
 3f8:	ba 01       	movw	r22, r20
 3fa:	62 27       	eor	r22, r18
 3fc:	65 bb       	out	0x15, r22	; 21
					break;
 3fe:	08 95       	ret
					case  'D':
					case 'd':
					PORTD=PORTD^(1<<pin);
 400:	22 b3       	in	r18, 0x12	; 18
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	ac 01       	movw	r20, r24
 408:	02 c0       	rjmp	.+4      	; 0x40e <dio_toggle_pin+0x8e>
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <dio_toggle_pin+0x8a>
 412:	ba 01       	movw	r22, r20
 414:	62 27       	eor	r22, r18
 416:	62 bb       	out	0x12, r22	; 18
 418:	08 95       	ret

0000041a <dio_set_port>:
					break;
					}
			}
			void dio_set_port(unsigned char port,unsigned char dir)
			{
				switch(port)
 41a:	84 34       	cpi	r24, 0x44	; 68
 41c:	d9 f0       	breq	.+54     	; 0x454 <dio_set_port+0x3a>
 41e:	85 34       	cpi	r24, 0x45	; 69
 420:	38 f4       	brcc	.+14     	; 0x430 <dio_set_port+0x16>
 422:	82 34       	cpi	r24, 0x42	; 66
 424:	99 f0       	breq	.+38     	; 0x44c <dio_set_port+0x32>
 426:	83 34       	cpi	r24, 0x43	; 67
 428:	98 f4       	brcc	.+38     	; 0x450 <dio_set_port+0x36>
 42a:	81 34       	cpi	r24, 0x41	; 65
 42c:	a1 f4       	brne	.+40     	; 0x456 <dio_set_port+0x3c>
 42e:	0c c0       	rjmp	.+24     	; 0x448 <dio_set_port+0x2e>
 430:	82 36       	cpi	r24, 0x62	; 98
 432:	61 f0       	breq	.+24     	; 0x44c <dio_set_port+0x32>
 434:	83 36       	cpi	r24, 0x63	; 99
 436:	18 f4       	brcc	.+6      	; 0x43e <dio_set_port+0x24>
 438:	81 36       	cpi	r24, 0x61	; 97
 43a:	69 f4       	brne	.+26     	; 0x456 <dio_set_port+0x3c>
 43c:	05 c0       	rjmp	.+10     	; 0x448 <dio_set_port+0x2e>
 43e:	83 36       	cpi	r24, 0x63	; 99
 440:	39 f0       	breq	.+14     	; 0x450 <dio_set_port+0x36>
 442:	84 36       	cpi	r24, 0x64	; 100
 444:	41 f4       	brne	.+16     	; 0x456 <dio_set_port+0x3c>
 446:	06 c0       	rjmp	.+12     	; 0x454 <dio_set_port+0x3a>
				{
				case 'A':
				case 'a':
					DDRA=dir;
 448:	6a bb       	out	0x1a, r22	; 26
	break;
 44a:	08 95       	ret
	case 'b':
	case 'B':
	DDRB=dir;
 44c:	67 bb       	out	0x17, r22	; 23
	break;
 44e:	08 95       	ret
	case 'C':
	case 'c':
	DDRC=dir;
 450:	64 bb       	out	0x14, r22	; 20
	break;
 452:	08 95       	ret
	case  'D':
	case 'd':
	DDRD=dir;
 454:	61 bb       	out	0x11, r22	; 17
 456:	08 95       	ret

00000458 <dio_write_port>:
	
	}
}
void dio_write_port(char port,unsigned char val)
{
	switch(port)
 458:	84 34       	cpi	r24, 0x44	; 68
 45a:	d9 f0       	breq	.+54     	; 0x492 <dio_write_port+0x3a>
 45c:	85 34       	cpi	r24, 0x45	; 69
 45e:	38 f4       	brcc	.+14     	; 0x46e <dio_write_port+0x16>
 460:	82 34       	cpi	r24, 0x42	; 66
 462:	99 f0       	breq	.+38     	; 0x48a <dio_write_port+0x32>
 464:	83 34       	cpi	r24, 0x43	; 67
 466:	98 f4       	brcc	.+38     	; 0x48e <dio_write_port+0x36>
 468:	81 34       	cpi	r24, 0x41	; 65
 46a:	a1 f4       	brne	.+40     	; 0x494 <dio_write_port+0x3c>
 46c:	0c c0       	rjmp	.+24     	; 0x486 <dio_write_port+0x2e>
 46e:	82 36       	cpi	r24, 0x62	; 98
 470:	61 f0       	breq	.+24     	; 0x48a <dio_write_port+0x32>
 472:	83 36       	cpi	r24, 0x63	; 99
 474:	18 f4       	brcc	.+6      	; 0x47c <dio_write_port+0x24>
 476:	81 36       	cpi	r24, 0x61	; 97
 478:	69 f4       	brne	.+26     	; 0x494 <dio_write_port+0x3c>
 47a:	05 c0       	rjmp	.+10     	; 0x486 <dio_write_port+0x2e>
 47c:	83 36       	cpi	r24, 0x63	; 99
 47e:	39 f0       	breq	.+14     	; 0x48e <dio_write_port+0x36>
 480:	84 36       	cpi	r24, 0x64	; 100
 482:	41 f4       	brne	.+16     	; 0x494 <dio_write_port+0x3c>
 484:	06 c0       	rjmp	.+12     	; 0x492 <dio_write_port+0x3a>
	{
	case 'A':
	case 'a':
	PORTA=val;	
 486:	6b bb       	out	0x1b, r22	; 27
	break;
 488:	08 95       	ret
	case 'B':
	case 'b':
	PORTB=val;
 48a:	68 bb       	out	0x18, r22	; 24
	break;
 48c:	08 95       	ret
	case 'C':
	case 'c':
	PORTC=val;
 48e:	65 bb       	out	0x15, r22	; 21
	break;
 490:	08 95       	ret
	case 'D':
	case 'd':
	PORTD=val;
 492:	62 bb       	out	0x12, r22	; 18
 494:	08 95       	ret

00000496 <dio_read_port>:
	}
}
unsigned char dio_read_port(unsigned char port)
{
	unsigned char val;
	switch (port)
 496:	84 34       	cpi	r24, 0x44	; 68
 498:	d9 f0       	breq	.+54     	; 0x4d0 <dio_read_port+0x3a>
 49a:	85 34       	cpi	r24, 0x45	; 69
 49c:	38 f4       	brcc	.+14     	; 0x4ac <dio_read_port+0x16>
 49e:	82 34       	cpi	r24, 0x42	; 66
 4a0:	99 f0       	breq	.+38     	; 0x4c8 <dio_read_port+0x32>
 4a2:	83 34       	cpi	r24, 0x43	; 67
 4a4:	98 f4       	brcc	.+38     	; 0x4cc <dio_read_port+0x36>
 4a6:	81 34       	cpi	r24, 0x41	; 65
 4a8:	a1 f4       	brne	.+40     	; 0x4d2 <dio_read_port+0x3c>
 4aa:	0c c0       	rjmp	.+24     	; 0x4c4 <dio_read_port+0x2e>
 4ac:	82 36       	cpi	r24, 0x62	; 98
 4ae:	61 f0       	breq	.+24     	; 0x4c8 <dio_read_port+0x32>
 4b0:	83 36       	cpi	r24, 0x63	; 99
 4b2:	18 f4       	brcc	.+6      	; 0x4ba <dio_read_port+0x24>
 4b4:	81 36       	cpi	r24, 0x61	; 97
 4b6:	69 f4       	brne	.+26     	; 0x4d2 <dio_read_port+0x3c>
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <dio_read_port+0x2e>
 4ba:	83 36       	cpi	r24, 0x63	; 99
 4bc:	39 f0       	breq	.+14     	; 0x4cc <dio_read_port+0x36>
 4be:	84 36       	cpi	r24, 0x64	; 100
 4c0:	41 f4       	brne	.+16     	; 0x4d2 <dio_read_port+0x3c>
 4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <dio_read_port+0x3a>
	{
	case 'a' :
	case 'A' :
	val=PINA;
 4c4:	89 b3       	in	r24, 0x19	; 25
	break;
 4c6:	08 95       	ret
	case 'B' :
	case 'b' :
	val=PINB;
 4c8:	86 b3       	in	r24, 0x16	; 22
	break;
 4ca:	08 95       	ret
	case 'C' :
	case 'c' :
	val=PINC;
 4cc:	83 b3       	in	r24, 0x13	; 19
	break;
 4ce:	08 95       	ret
	case 'D' :
	case 'd' :
	val=PIND;
 4d0:	80 b3       	in	r24, 0x10	; 16
	default:
	break;
	
	}
	
}
 4d2:	08 95       	ret

000004d4 <dio_toggle_port>:
void dio_toggle_port(char port)
{
		unsigned char val;
		switch (port)
 4d4:	84 34       	cpi	r24, 0x44	; 68
 4d6:	09 f1       	breq	.+66     	; 0x51a <dio_toggle_port+0x46>
 4d8:	85 34       	cpi	r24, 0x45	; 69
 4da:	38 f4       	brcc	.+14     	; 0x4ea <dio_toggle_port+0x16>
 4dc:	82 34       	cpi	r24, 0x42	; 66
 4de:	a9 f0       	breq	.+42     	; 0x50a <dio_toggle_port+0x36>
 4e0:	83 34       	cpi	r24, 0x43	; 67
 4e2:	b8 f4       	brcc	.+46     	; 0x512 <dio_toggle_port+0x3e>
 4e4:	81 34       	cpi	r24, 0x41	; 65
 4e6:	e1 f4       	brne	.+56     	; 0x520 <dio_toggle_port+0x4c>
 4e8:	0c c0       	rjmp	.+24     	; 0x502 <dio_toggle_port+0x2e>
 4ea:	82 36       	cpi	r24, 0x62	; 98
 4ec:	71 f0       	breq	.+28     	; 0x50a <dio_toggle_port+0x36>
 4ee:	83 36       	cpi	r24, 0x63	; 99
 4f0:	18 f4       	brcc	.+6      	; 0x4f8 <dio_toggle_port+0x24>
 4f2:	81 36       	cpi	r24, 0x61	; 97
 4f4:	a9 f4       	brne	.+42     	; 0x520 <dio_toggle_port+0x4c>
 4f6:	05 c0       	rjmp	.+10     	; 0x502 <dio_toggle_port+0x2e>
 4f8:	83 36       	cpi	r24, 0x63	; 99
 4fa:	59 f0       	breq	.+22     	; 0x512 <dio_toggle_port+0x3e>
 4fc:	84 36       	cpi	r24, 0x64	; 100
 4fe:	81 f4       	brne	.+32     	; 0x520 <dio_toggle_port+0x4c>
 500:	0c c0       	rjmp	.+24     	; 0x51a <dio_toggle_port+0x46>
		{
			case 'a' :
			case 'A' :
			PORTA=~PORTA;
 502:	8b b3       	in	r24, 0x1b	; 27
 504:	80 95       	com	r24
 506:	8b bb       	out	0x1b, r24	; 27
			break;
 508:	08 95       	ret
			case 'B' :
			case 'b' :
				PORTB=~PORTB;
 50a:	88 b3       	in	r24, 0x18	; 24
 50c:	80 95       	com	r24
 50e:	88 bb       	out	0x18, r24	; 24
			break;
 510:	08 95       	ret
			case 'C' :
			case 'c' :
				PORTC=~PORTC;
 512:	85 b3       	in	r24, 0x15	; 21
 514:	80 95       	com	r24
 516:	85 bb       	out	0x15, r24	; 21
			break;
 518:	08 95       	ret
			case 'D' :
			case 'd' :
		PORTD=~PORTD;
 51a:	82 b3       	in	r24, 0x12	; 18
 51c:	80 95       	com	r24
 51e:	82 bb       	out	0x12, r24	; 18
 520:	08 95       	ret

00000522 <dio_pull_up_en>:
		}
}
void dio_pull_up_en (char port,char pin ,char en)
{
	
	switch(port)
 522:	84 34       	cpi	r24, 0x44	; 68
 524:	09 f4       	brne	.+2      	; 0x528 <dio_pull_up_en+0x6>
 526:	80 c0       	rjmp	.+256    	; 0x628 <dio_pull_up_en+0x106>
 528:	85 34       	cpi	r24, 0x45	; 69
 52a:	48 f4       	brcc	.+18     	; 0x53e <dio_pull_up_en+0x1c>
 52c:	82 34       	cpi	r24, 0x42	; 66
 52e:	c1 f1       	breq	.+112    	; 0x5a0 <dio_pull_up_en+0x7e>
 530:	83 34       	cpi	r24, 0x43	; 67
 532:	08 f0       	brcs	.+2      	; 0x536 <dio_pull_up_en+0x14>
 534:	57 c0       	rjmp	.+174    	; 0x5e4 <dio_pull_up_en+0xc2>
 536:	81 34       	cpi	r24, 0x41	; 65
 538:	09 f0       	breq	.+2      	; 0x53c <dio_pull_up_en+0x1a>
 53a:	97 c0       	rjmp	.+302    	; 0x66a <dio_pull_up_en+0x148>
 53c:	0f c0       	rjmp	.+30     	; 0x55c <dio_pull_up_en+0x3a>
 53e:	82 36       	cpi	r24, 0x62	; 98
 540:	79 f1       	breq	.+94     	; 0x5a0 <dio_pull_up_en+0x7e>
 542:	83 36       	cpi	r24, 0x63	; 99
 544:	20 f4       	brcc	.+8      	; 0x54e <dio_pull_up_en+0x2c>
 546:	81 36       	cpi	r24, 0x61	; 97
 548:	09 f0       	breq	.+2      	; 0x54c <dio_pull_up_en+0x2a>
 54a:	8f c0       	rjmp	.+286    	; 0x66a <dio_pull_up_en+0x148>
 54c:	07 c0       	rjmp	.+14     	; 0x55c <dio_pull_up_en+0x3a>
 54e:	83 36       	cpi	r24, 0x63	; 99
 550:	09 f4       	brne	.+2      	; 0x554 <dio_pull_up_en+0x32>
 552:	48 c0       	rjmp	.+144    	; 0x5e4 <dio_pull_up_en+0xc2>
 554:	84 36       	cpi	r24, 0x64	; 100
 556:	09 f0       	breq	.+2      	; 0x55a <dio_pull_up_en+0x38>
 558:	88 c0       	rjmp	.+272    	; 0x66a <dio_pull_up_en+0x148>
 55a:	66 c0       	rjmp	.+204    	; 0x628 <dio_pull_up_en+0x106>
{
	case 'a':
	case 'A':
if (en==1)
 55c:	41 30       	cpi	r20, 0x01	; 1
 55e:	91 f4       	brne	.+36     	; 0x584 <dio_pull_up_en+0x62>
{
PORTA=PORTA|(1<<pin);
 560:	2b b3       	in	r18, 0x1b	; 27
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	ac 01       	movw	r20, r24
 568:	02 c0       	rjmp	.+4      	; 0x56e <dio_pull_up_en+0x4c>
 56a:	44 0f       	add	r20, r20
 56c:	55 1f       	adc	r21, r21
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <dio_pull_up_en+0x48>
 572:	ba 01       	movw	r22, r20
 574:	82 2f       	mov	r24, r18
 576:	84 2b       	or	r24, r20
 578:	8b bb       	out	0x1b, r24	; 27
DDRA=DDRA&(~(1<<pin));
 57a:	8a b3       	in	r24, 0x1a	; 26
 57c:	60 95       	com	r22
 57e:	68 23       	and	r22, r24
 580:	6a bb       	out	0x1a, r22	; 26
 582:	08 95       	ret
}
else
{
	PORTA=PORTA&(~(1<<pin));
 584:	2b b3       	in	r18, 0x1b	; 27
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	ac 01       	movw	r20, r24
 58c:	02 c0       	rjmp	.+4      	; 0x592 <dio_pull_up_en+0x70>
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <dio_pull_up_en+0x6c>
 596:	ba 01       	movw	r22, r20
 598:	60 95       	com	r22
 59a:	62 23       	and	r22, r18
 59c:	6b bb       	out	0x1b, r22	; 27
 59e:	08 95       	ret
}break;
case 'b':
case 'B':
if (en==1)
 5a0:	41 30       	cpi	r20, 0x01	; 1
 5a2:	91 f4       	brne	.+36     	; 0x5c8 <dio_pull_up_en+0xa6>
{
	PORTB=PORTB|(1<<pin);
 5a4:	28 b3       	in	r18, 0x18	; 24
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	ac 01       	movw	r20, r24
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <dio_pull_up_en+0x90>
 5ae:	44 0f       	add	r20, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <dio_pull_up_en+0x8c>
 5b6:	ba 01       	movw	r22, r20
 5b8:	82 2f       	mov	r24, r18
 5ba:	84 2b       	or	r24, r20
 5bc:	88 bb       	out	0x18, r24	; 24
	DDRB=DDRB&(~(1<<pin));
 5be:	87 b3       	in	r24, 0x17	; 23
 5c0:	60 95       	com	r22
 5c2:	68 23       	and	r22, r24
 5c4:	67 bb       	out	0x17, r22	; 23
 5c6:	08 95       	ret
}
else
{
	PORTB=PORTB&(~(1<<pin));
 5c8:	28 b3       	in	r18, 0x18	; 24
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	ac 01       	movw	r20, r24
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <dio_pull_up_en+0xb4>
 5d2:	44 0f       	add	r20, r20
 5d4:	55 1f       	adc	r21, r21
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <dio_pull_up_en+0xb0>
 5da:	ba 01       	movw	r22, r20
 5dc:	60 95       	com	r22
 5de:	62 23       	and	r22, r18
 5e0:	68 bb       	out	0x18, r22	; 24
 5e2:	08 95       	ret
}break;
case 'c':
case 'C':
if (en==1)
 5e4:	41 30       	cpi	r20, 0x01	; 1
 5e6:	91 f4       	brne	.+36     	; 0x60c <dio_pull_up_en+0xea>
{
	PORTC=PORTC|(1<<pin);
 5e8:	25 b3       	in	r18, 0x15	; 21
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	ac 01       	movw	r20, r24
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <dio_pull_up_en+0xd4>
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <dio_pull_up_en+0xd0>
 5fa:	ba 01       	movw	r22, r20
 5fc:	82 2f       	mov	r24, r18
 5fe:	84 2b       	or	r24, r20
 600:	85 bb       	out	0x15, r24	; 21
	DDRC=DDRC&(~(1<<pin));
 602:	84 b3       	in	r24, 0x14	; 20
 604:	60 95       	com	r22
 606:	68 23       	and	r22, r24
 608:	64 bb       	out	0x14, r22	; 20
 60a:	08 95       	ret
}
else
{
	PORTC=PORTC&(~(1<<pin));
 60c:	25 b3       	in	r18, 0x15	; 21
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	ac 01       	movw	r20, r24
 614:	02 c0       	rjmp	.+4      	; 0x61a <dio_pull_up_en+0xf8>
 616:	44 0f       	add	r20, r20
 618:	55 1f       	adc	r21, r21
 61a:	6a 95       	dec	r22
 61c:	e2 f7       	brpl	.-8      	; 0x616 <dio_pull_up_en+0xf4>
 61e:	ba 01       	movw	r22, r20
 620:	60 95       	com	r22
 622:	62 23       	and	r22, r18
 624:	65 bb       	out	0x15, r22	; 21
 626:	08 95       	ret
}break;
case 'd':
case 'D':
if (en==1)
 628:	41 30       	cpi	r20, 0x01	; 1
 62a:	91 f4       	brne	.+36     	; 0x650 <dio_pull_up_en+0x12e>
{
	PORTD=PORTD|(1<<pin);
 62c:	22 b3       	in	r18, 0x12	; 18
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	ac 01       	movw	r20, r24
 634:	02 c0       	rjmp	.+4      	; 0x63a <dio_pull_up_en+0x118>
 636:	44 0f       	add	r20, r20
 638:	55 1f       	adc	r21, r21
 63a:	6a 95       	dec	r22
 63c:	e2 f7       	brpl	.-8      	; 0x636 <dio_pull_up_en+0x114>
 63e:	ba 01       	movw	r22, r20
 640:	82 2f       	mov	r24, r18
 642:	84 2b       	or	r24, r20
 644:	82 bb       	out	0x12, r24	; 18
	DDRD=DDRD&(~(1<<pin));
 646:	81 b3       	in	r24, 0x11	; 17
 648:	60 95       	com	r22
 64a:	68 23       	and	r22, r24
 64c:	61 bb       	out	0x11, r22	; 17
 64e:	08 95       	ret
}
else
{
	PORTD=PORTD&(~(1<<pin));
 650:	22 b3       	in	r18, 0x12	; 18
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	ac 01       	movw	r20, r24
 658:	02 c0       	rjmp	.+4      	; 0x65e <dio_pull_up_en+0x13c>
 65a:	44 0f       	add	r20, r20
 65c:	55 1f       	adc	r21, r21
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <dio_pull_up_en+0x138>
 662:	ba 01       	movw	r22, r20
 664:	60 95       	com	r22
 666:	62 23       	and	r22, r18
 668:	62 bb       	out	0x12, r22	; 18
 66a:	08 95       	ret

0000066c <dio_write_lo_level>:
break;
}
}
void dio_write_lo_level(char port,unsigned char val)
{
	val=val & 0x0f;
 66c:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
 66e:	84 34       	cpi	r24, 0x44	; 68
 670:	51 f1       	breq	.+84     	; 0x6c6 <dio_write_lo_level+0x5a>
 672:	85 34       	cpi	r24, 0x45	; 69
 674:	38 f4       	brcc	.+14     	; 0x684 <dio_write_lo_level+0x18>
 676:	82 34       	cpi	r24, 0x42	; 66
 678:	c1 f0       	breq	.+48     	; 0x6aa <dio_write_lo_level+0x3e>
 67a:	83 34       	cpi	r24, 0x43	; 67
 67c:	e8 f4       	brcc	.+58     	; 0x6b8 <dio_write_lo_level+0x4c>
 67e:	81 34       	cpi	r24, 0x41	; 65
 680:	41 f5       	brne	.+80     	; 0x6d2 <dio_write_lo_level+0x66>
 682:	0c c0       	rjmp	.+24     	; 0x69c <dio_write_lo_level+0x30>
 684:	82 36       	cpi	r24, 0x62	; 98
 686:	89 f0       	breq	.+34     	; 0x6aa <dio_write_lo_level+0x3e>
 688:	83 36       	cpi	r24, 0x63	; 99
 68a:	18 f4       	brcc	.+6      	; 0x692 <dio_write_lo_level+0x26>
 68c:	81 36       	cpi	r24, 0x61	; 97
 68e:	09 f5       	brne	.+66     	; 0x6d2 <dio_write_lo_level+0x66>
 690:	05 c0       	rjmp	.+10     	; 0x69c <dio_write_lo_level+0x30>
 692:	83 36       	cpi	r24, 0x63	; 99
 694:	89 f0       	breq	.+34     	; 0x6b8 <dio_write_lo_level+0x4c>
 696:	84 36       	cpi	r24, 0x64	; 100
 698:	e1 f4       	brne	.+56     	; 0x6d2 <dio_write_lo_level+0x66>
 69a:	15 c0       	rjmp	.+42     	; 0x6c6 <dio_write_lo_level+0x5a>
	{
		case 'a':
		case 'A':
		PORTA=PORTA& 0xf0;
 69c:	8b b3       	in	r24, 0x1b	; 27
 69e:	80 7f       	andi	r24, 0xF0	; 240
 6a0:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
 6a2:	8b b3       	in	r24, 0x1b	; 27
 6a4:	68 2b       	or	r22, r24
 6a6:	6b bb       	out	0x1b, r22	; 27
		break;
 6a8:	08 95       	ret
		case 'b':
		case 'B':
		PORTB=PORTB& 0xf0;
 6aa:	88 b3       	in	r24, 0x18	; 24
 6ac:	80 7f       	andi	r24, 0xF0	; 240
 6ae:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
 6b0:	88 b3       	in	r24, 0x18	; 24
 6b2:	68 2b       	or	r22, r24
 6b4:	68 bb       	out	0x18, r22	; 24
		break;
 6b6:	08 95       	ret
		case 'c':
		case 'C':
		PORTC=PORTC& 0xf0;
 6b8:	85 b3       	in	r24, 0x15	; 21
 6ba:	80 7f       	andi	r24, 0xF0	; 240
 6bc:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
 6be:	85 b3       	in	r24, 0x15	; 21
 6c0:	68 2b       	or	r22, r24
 6c2:	65 bb       	out	0x15, r22	; 21
		break;
 6c4:	08 95       	ret
		case 'd':
		case 'D':
		PORTD=PORTD& 0xf0;
 6c6:	82 b3       	in	r24, 0x12	; 18
 6c8:	80 7f       	andi	r24, 0xF0	; 240
 6ca:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
 6cc:	82 b3       	in	r24, 0x12	; 18
 6ce:	68 2b       	or	r22, r24
 6d0:	62 bb       	out	0x12, r22	; 18
 6d2:	08 95       	ret

000006d4 <dio_write_hi_level>:

}
void dio_write_hi_level(char port,unsigned char val)
{
	val =val <<4;
	val=val & 0xf0;
 6d4:	62 95       	swap	r22
 6d6:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 6d8:	84 34       	cpi	r24, 0x44	; 68
 6da:	51 f1       	breq	.+84     	; 0x730 <dio_write_hi_level+0x5c>
 6dc:	85 34       	cpi	r24, 0x45	; 69
 6de:	38 f4       	brcc	.+14     	; 0x6ee <dio_write_hi_level+0x1a>
 6e0:	82 34       	cpi	r24, 0x42	; 66
 6e2:	c1 f0       	breq	.+48     	; 0x714 <dio_write_hi_level+0x40>
 6e4:	83 34       	cpi	r24, 0x43	; 67
 6e6:	e8 f4       	brcc	.+58     	; 0x722 <dio_write_hi_level+0x4e>
 6e8:	81 34       	cpi	r24, 0x41	; 65
 6ea:	41 f5       	brne	.+80     	; 0x73c <dio_write_hi_level+0x68>
 6ec:	0c c0       	rjmp	.+24     	; 0x706 <dio_write_hi_level+0x32>
 6ee:	82 36       	cpi	r24, 0x62	; 98
 6f0:	89 f0       	breq	.+34     	; 0x714 <dio_write_hi_level+0x40>
 6f2:	83 36       	cpi	r24, 0x63	; 99
 6f4:	18 f4       	brcc	.+6      	; 0x6fc <dio_write_hi_level+0x28>
 6f6:	81 36       	cpi	r24, 0x61	; 97
 6f8:	09 f5       	brne	.+66     	; 0x73c <dio_write_hi_level+0x68>
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <dio_write_hi_level+0x32>
 6fc:	83 36       	cpi	r24, 0x63	; 99
 6fe:	89 f0       	breq	.+34     	; 0x722 <dio_write_hi_level+0x4e>
 700:	84 36       	cpi	r24, 0x64	; 100
 702:	e1 f4       	brne	.+56     	; 0x73c <dio_write_hi_level+0x68>
 704:	15 c0       	rjmp	.+42     	; 0x730 <dio_write_hi_level+0x5c>
	{
		case 'a':
		case 'A':
		PORTA=PORTA& 0x0f;
 706:	8b b3       	in	r24, 0x1b	; 27
 708:	8f 70       	andi	r24, 0x0F	; 15
 70a:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
 70c:	8b b3       	in	r24, 0x1b	; 27
 70e:	68 2b       	or	r22, r24
 710:	6b bb       	out	0x1b, r22	; 27
		break;
 712:	08 95       	ret
		case 'b':
		case 'B':
		PORTB=PORTB& 0x0f;
 714:	88 b3       	in	r24, 0x18	; 24
 716:	8f 70       	andi	r24, 0x0F	; 15
 718:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
 71a:	88 b3       	in	r24, 0x18	; 24
 71c:	68 2b       	or	r22, r24
 71e:	68 bb       	out	0x18, r22	; 24
		break;
 720:	08 95       	ret
		case 'c':
		case 'C':
		PORTC=PORTC& 0x0f;
 722:	85 b3       	in	r24, 0x15	; 21
 724:	8f 70       	andi	r24, 0x0F	; 15
 726:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
 728:	85 b3       	in	r24, 0x15	; 21
 72a:	68 2b       	or	r22, r24
 72c:	65 bb       	out	0x15, r22	; 21
		break;
 72e:	08 95       	ret
		case 'd':
		case 'D':
		PORTD=PORTD& 0x0f;
 730:	82 b3       	in	r24, 0x12	; 18
 732:	8f 70       	andi	r24, 0x0F	; 15
 734:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
 736:	82 b3       	in	r24, 0x12	; 18
 738:	68 2b       	or	r22, r24
 73a:	62 bb       	out	0x12, r22	; 18
 73c:	08 95       	ret

0000073e <tostring>:
 *
 * Created: 12/07/2023 12:05:43 م
 *  Author: handsa
 */ 
void tostring(char str[],int c) // char str[] is pointer to char
{
 73e:	af 92       	push	r10
 740:	bf 92       	push	r11
 742:	cf 92       	push	r12
 744:	df 92       	push	r13
 746:	ef 92       	push	r14
 748:	ff 92       	push	r15
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	5c 01       	movw	r10, r24
 754:	fb 01       	movw	r30, r22
	int i,rem,len=0,n;
	n=c;
	while(n!=0)
 756:	30 97       	sbiw	r30, 0x00	; 0
 758:	49 f1       	breq	.+82     	; 0x7ac <tostring+0x6e>
 *  Author: handsa
 */ 
void tostring(char str[],int c) // char str[] is pointer to char
{
	int i,rem,len=0,n;
	n=c;
 75a:	cb 01       	movw	r24, r22
 * Created: 12/07/2023 12:05:43 م
 *  Author: handsa
 */ 
void tostring(char str[],int c) // char str[] is pointer to char
{
	int i,rem,len=0,n;
 75c:	00 e0       	ldi	r16, 0x00	; 0
 75e:	10 e0       	ldi	r17, 0x00	; 0
	n=c;
	while(n!=0)
	{
		len++;
		n/=10;
 760:	2a e0       	ldi	r18, 0x0A	; 10
 762:	30 e0       	ldi	r19, 0x00	; 0
{
	int i,rem,len=0,n;
	n=c;
	while(n!=0)
	{
		len++;
 764:	0f 5f       	subi	r16, 0xFF	; 255
 766:	1f 4f       	sbci	r17, 0xFF	; 255
		n/=10;
 768:	b9 01       	movw	r22, r18
 76a:	0e 94 b3 06 	call	0xd66	; 0xd66 <__divmodhi4>
 76e:	cb 01       	movw	r24, r22
 */ 
void tostring(char str[],int c) // char str[] is pointer to char
{
	int i,rem,len=0,n;
	n=c;
	while(n!=0)
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	c1 f7       	brne	.-16     	; 0x764 <tostring+0x26>
	{
		len++;
 774:	68 01       	movw	r12, r16
		n/=10;
	}
	for(i=0;i<len;i++)
 776:	10 16       	cp	r1, r16
 778:	11 06       	cpc	r1, r17
 77a:	d4 f4       	brge	.+52     	; 0x7b0 <tostring+0x72>
 * int_to_string1.c
 *
 * Created: 12/07/2023 12:05:43 م
 *  Author: handsa
 */ 
void tostring(char str[],int c) // char str[] is pointer to char
 77c:	e5 01       	movw	r28, r10
 77e:	c0 0f       	add	r28, r16
 780:	d1 1f       	adc	r29, r17
 782:	20 e0       	ldi	r18, 0x00	; 0
 784:	30 e0       	ldi	r19, 0x00	; 0
		len++;
		n/=10;
	}
	for(i=0;i<len;i++)
	{
		rem=c%10;
 786:	0f 2e       	mov	r0, r31
 788:	fa e0       	ldi	r31, 0x0A	; 10
 78a:	ef 2e       	mov	r14, r31
 78c:	ff 24       	eor	r15, r15
 78e:	f0 2d       	mov	r31, r0
 790:	cf 01       	movw	r24, r30
 792:	b7 01       	movw	r22, r14
 794:	0e 94 b3 06 	call	0xd66	; 0xd66 <__divmodhi4>
		c=c/10;
 798:	e6 2f       	mov	r30, r22
 79a:	f7 2f       	mov	r31, r23
		str[len-(i+1)]=rem+'0';//add ascii code of '0'(48)to every digit to get its ascii code
 79c:	80 5d       	subi	r24, 0xD0	; 208
 79e:	8a 93       	st	-Y, r24
	while(n!=0)
	{
		len++;
		n/=10;
	}
	for(i=0;i<len;i++)
 7a0:	2f 5f       	subi	r18, 0xFF	; 255
 7a2:	3f 4f       	sbci	r19, 0xFF	; 255
 7a4:	2c 15       	cp	r18, r12
 7a6:	3d 05       	cpc	r19, r13
 7a8:	99 f7       	brne	.-26     	; 0x790 <tostring+0x52>
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <tostring+0x72>
 * Created: 12/07/2023 12:05:43 م
 *  Author: handsa
 */ 
void tostring(char str[],int c) // char str[] is pointer to char
{
	int i,rem,len=0,n;
 7ac:	00 e0       	ldi	r16, 0x00	; 0
 7ae:	10 e0       	ldi	r17, 0x00	; 0
	{
		rem=c%10;
		c=c/10;
		str[len-(i+1)]=rem+'0';//add ascii code of '0'(48)to every digit to get its ascii code
	}
	str[len]='\0';
 7b0:	0a 0d       	add	r16, r10
 7b2:	1b 1d       	adc	r17, r11
 7b4:	f8 01       	movw	r30, r16
 7b6:	10 82       	st	Z, r1
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	1f 91       	pop	r17
 7be:	0f 91       	pop	r16
 7c0:	ff 90       	pop	r15
 7c2:	ef 90       	pop	r14
 7c4:	df 90       	pop	r13
 7c6:	cf 90       	pop	r12
 7c8:	bf 90       	pop	r11
 7ca:	af 90       	pop	r10
 7cc:	08 95       	ret

000007ce <pulse>:

#endif
}
static void pulse(void)
{
	dio_write_pin(st2,en,1);
 7ce:	83 e4       	ldi	r24, 0x43	; 67
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7d8:	8f e9       	ldi	r24, 0x9F	; 159
 7da:	9f e0       	ldi	r25, 0x0F	; 15
 7dc:	01 97       	sbiw	r24, 0x01	; 1
 7de:	f1 f7       	brne	.-4      	; 0x7dc <pulse+0xe>
 7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <pulse+0x14>
 7e2:	00 00       	nop
	dm(2);
		dio_write_pin(st2,en,0);
 7e4:	83 e4       	ldi	r24, 0x43	; 67
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <dio_write_pin>
 7ee:	8f e9       	ldi	r24, 0x9F	; 159
 7f0:	9f e0       	ldi	r25, 0x0F	; 15
 7f2:	01 97       	sbiw	r24, 0x01	; 1
 7f4:	f1 f7       	brne	.-4      	; 0x7f2 <pulse+0x24>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <pulse+0x2a>
 7f8:	00 00       	nop
			dm(2);
}
 7fa:	08 95       	ret

000007fc <lcd_send_cmd>:
void lcd_send_cmd(char data)
{
 7fc:	cf 93       	push	r28
 7fe:	c8 2f       	mov	r28, r24
	dio_write_port(st1,data);
	dio_write_pin(st2,rs,0);
	pulse();
	dm(1);
#elif defined four_bits_mode
dio_write_lo_level(st1,data>>4);
 800:	68 2f       	mov	r22, r24
 802:	62 95       	swap	r22
 804:	6f 70       	andi	r22, 0x0F	; 15
 806:	82 e4       	ldi	r24, 0x42	; 66
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	0e 94 36 03 	call	0x66c	; 0x66c <dio_write_lo_level>
dio_write_pin(st2,rs,0);
 810:	83 e4       	ldi	r24, 0x43	; 67
 812:	61 e0       	ldi	r22, 0x01	; 1
 814:	40 e0       	ldi	r20, 0x00	; 0
 816:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <dio_write_pin>
pulse();
 81a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <pulse>
 81e:	8f ec       	ldi	r24, 0xCF	; 207
 820:	97 e0       	ldi	r25, 0x07	; 7
 822:	01 97       	sbiw	r24, 0x01	; 1
 824:	f1 f7       	brne	.-4      	; 0x822 <lcd_send_cmd+0x26>
 826:	00 c0       	rjmp	.+0      	; 0x828 <lcd_send_cmd+0x2c>
 828:	00 00       	nop
dm(1);
dio_write_lo_level(st1,data);
 82a:	82 e4       	ldi	r24, 0x42	; 66
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	6c 2f       	mov	r22, r28
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	0e 94 36 03 	call	0x66c	; 0x66c <dio_write_lo_level>
pulse();
 836:	0e 94 e7 03 	call	0x7ce	; 0x7ce <pulse>
 83a:	8f ec       	ldi	r24, 0xCF	; 207
 83c:	97 e0       	ldi	r25, 0x07	; 7
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	f1 f7       	brne	.-4      	; 0x83e <lcd_send_cmd+0x42>
 842:	00 c0       	rjmp	.+0      	; 0x844 <lcd_send_cmd+0x48>
 844:	00 00       	nop
dm(1);
#endif
}
 846:	cf 91       	pop	r28
 848:	08 95       	ret

0000084a <lcd_init>:
		//lcd_send_cmd(0x04);
lcd_send_cmd(entry_mode);
	dm(1);

#elif defined four_bits_mode
dio_set_pin(st1,0,1);
 84a:	82 e4       	ldi	r24, 0x42	; 66
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	41 e0       	ldi	r20, 0x01	; 1
 850:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_pin>
dio_set_pin(st1,1,1);
 854:	82 e4       	ldi	r24, 0x42	; 66
 856:	61 e0       	ldi	r22, 0x01	; 1
 858:	41 e0       	ldi	r20, 0x01	; 1
 85a:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_pin>
dio_set_pin(st1,2,1);
 85e:	82 e4       	ldi	r24, 0x42	; 66
 860:	62 e0       	ldi	r22, 0x02	; 2
 862:	41 e0       	ldi	r20, 0x01	; 1
 864:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_pin>
dio_set_pin(st1,3,1);
 868:	82 e4       	ldi	r24, 0x42	; 66
 86a:	63 e0       	ldi	r22, 0x03	; 3
 86c:	41 e0       	ldi	r20, 0x01	; 1
 86e:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_pin>
dio_set_pin(st2,en,1);
 872:	83 e4       	ldi	r24, 0x43	; 67
 874:	60 e0       	ldi	r22, 0x00	; 0
 876:	41 e0       	ldi	r20, 0x01	; 1
 878:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_pin>
dio_set_pin(st2,rs,1);
 87c:	83 e4       	ldi	r24, 0x43	; 67
 87e:	61 e0       	ldi	r22, 0x01	; 1
 880:	41 e0       	ldi	r20, 0x01	; 1
 882:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_pin>


lcd_send_cmd(return_home);
 886:	82 e0       	ldi	r24, 0x02	; 2
 888:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_send_cmd>
 88c:	8f e1       	ldi	r24, 0x1F	; 31
 88e:	9e e4       	ldi	r25, 0x4E	; 78
 890:	01 97       	sbiw	r24, 0x01	; 1
 892:	f1 f7       	brne	.-4      	; 0x890 <__stack+0x31>
 894:	00 c0       	rjmp	.+0      	; 0x896 <__stack+0x37>
 896:	00 00       	nop

dm(10);
lcd_send_cmd(four_bits);
 898:	88 e2       	ldi	r24, 0x28	; 40
 89a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_send_cmd>
 89e:	8f ec       	ldi	r24, 0xCF	; 207
 8a0:	97 e0       	ldi	r25, 0x07	; 7
 8a2:	01 97       	sbiw	r24, 0x01	; 1
 8a4:	f1 f7       	brne	.-4      	; 0x8a2 <__stack+0x43>
 8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <__stack+0x49>
 8a8:	00 00       	nop
dm(1);

lcd_send_cmd(clr_screen);
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_send_cmd>
 8b0:	8f e1       	ldi	r24, 0x1F	; 31
 8b2:	9e e4       	ldi	r25, 0x4E	; 78
 8b4:	01 97       	sbiw	r24, 0x01	; 1
 8b6:	f1 f7       	brne	.-4      	; 0x8b4 <__stack+0x55>
 8b8:	00 c0       	rjmp	.+0      	; 0x8ba <__stack+0x5b>
 8ba:	00 00       	nop
dm(10);
lcd_send_cmd(entry_mode);
 8bc:	86 e0       	ldi	r24, 0x06	; 6
 8be:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_send_cmd>
 8c2:	8f ec       	ldi	r24, 0xCF	; 207
 8c4:	97 e0       	ldi	r25, 0x07	; 7
 8c6:	01 97       	sbiw	r24, 0x01	; 1
 8c8:	f1 f7       	brne	.-4      	; 0x8c6 <__stack+0x67>
 8ca:	00 c0       	rjmp	.+0      	; 0x8cc <__stack+0x6d>
 8cc:	00 00       	nop
dm(1);
lcd_send_cmd(cursor_on_disp_on);
 8ce:	8e e0       	ldi	r24, 0x0E	; 14
 8d0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_send_cmd>
 8d4:	8f ec       	ldi	r24, 0xCF	; 207
 8d6:	97 e0       	ldi	r25, 0x07	; 7
 8d8:	01 97       	sbiw	r24, 0x01	; 1
 8da:	f1 f7       	brne	.-4      	; 0x8d8 <__stack+0x79>
 8dc:	00 c0       	rjmp	.+0      	; 0x8de <__stack+0x7f>
 8de:	00 00       	nop
dm(1);


#endif
}
 8e0:	08 95       	ret

000008e2 <lcd_send_char>:
pulse();
dm(1);
#endif
}
void lcd_send_char(char data)
{
 8e2:	cf 93       	push	r28
 8e4:	c8 2f       	mov	r28, r24
	dio_write_port(st1,data);
	dio_write_pin(st2,rs,1);
	pulse();
	dm(1);
#elif defined four_bits_mode
dio_write_lo_level(st1,data>>4);
 8e6:	68 2f       	mov	r22, r24
 8e8:	62 95       	swap	r22
 8ea:	6f 70       	andi	r22, 0x0F	; 15
 8ec:	82 e4       	ldi	r24, 0x42	; 66
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	70 e0       	ldi	r23, 0x00	; 0
 8f2:	0e 94 36 03 	call	0x66c	; 0x66c <dio_write_lo_level>
dio_write_pin(st2,rs,1);
 8f6:	83 e4       	ldi	r24, 0x43	; 67
 8f8:	61 e0       	ldi	r22, 0x01	; 1
 8fa:	41 e0       	ldi	r20, 0x01	; 1
 8fc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <dio_write_pin>
pulse();
 900:	0e 94 e7 03 	call	0x7ce	; 0x7ce <pulse>
 904:	8f ec       	ldi	r24, 0xCF	; 207
 906:	97 e0       	ldi	r25, 0x07	; 7
 908:	01 97       	sbiw	r24, 0x01	; 1
 90a:	f1 f7       	brne	.-4      	; 0x908 <lcd_send_char+0x26>
 90c:	00 c0       	rjmp	.+0      	; 0x90e <lcd_send_char+0x2c>
 90e:	00 00       	nop
dm(1);
dio_write_lo_level(st1,data);
 910:	82 e4       	ldi	r24, 0x42	; 66
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	6c 2f       	mov	r22, r28
 916:	70 e0       	ldi	r23, 0x00	; 0
 918:	0e 94 36 03 	call	0x66c	; 0x66c <dio_write_lo_level>
pulse();
 91c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <pulse>
 920:	8f ec       	ldi	r24, 0xCF	; 207
 922:	97 e0       	ldi	r25, 0x07	; 7
 924:	01 97       	sbiw	r24, 0x01	; 1
 926:	f1 f7       	brne	.-4      	; 0x924 <lcd_send_char+0x42>
 928:	00 c0       	rjmp	.+0      	; 0x92a <lcd_send_char+0x48>
 92a:	00 00       	nop
dm(1);
#endif
}
 92c:	cf 91       	pop	r28
 92e:	08 95       	ret

00000930 <lcd_send_string>:
void lcd_send_string(char * data)
{
 930:	cf 93       	push	r28
 932:	df 93       	push	r29
 934:	ec 01       	movw	r28, r24
	while (*data!='\0')
 936:	88 81       	ld	r24, Y
 938:	88 23       	and	r24, r24
 93a:	31 f0       	breq	.+12     	; 0x948 <lcd_send_string+0x18>
dio_write_lo_level(st1,data);
pulse();
dm(1);
#endif
}
void lcd_send_string(char * data)
 93c:	21 96       	adiw	r28, 0x01	; 1
{
	while (*data!='\0')
	{
	lcd_send_char(*data);
 93e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
dm(1);
#endif
}
void lcd_send_string(char * data)
{
	while (*data!='\0')
 942:	89 91       	ld	r24, Y+
 944:	88 23       	and	r24, r24
 946:	d9 f7       	brne	.-10     	; 0x93e <lcd_send_string+0xe>
 948:	8f ec       	ldi	r24, 0xCF	; 207
 94a:	97 e0       	ldi	r25, 0x07	; 7
 94c:	01 97       	sbiw	r24, 0x01	; 1
 94e:	f1 f7       	brne	.-4      	; 0x94c <lcd_send_string+0x1c>
 950:	00 c0       	rjmp	.+0      	; 0x952 <lcd_send_string+0x22>
 952:	00 00       	nop

	
	}
		dm(1);
		
}
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	08 95       	ret

0000095a <lcd_clrscrean>:
void lcd_clrscrean(void)
{
	lcd_send_cmd(clr_screen);
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_send_cmd>
 960:	8f e1       	ldi	r24, 0x1F	; 31
 962:	9e e4       	ldi	r25, 0x4E	; 78
 964:	01 97       	sbiw	r24, 0x01	; 1
 966:	f1 f7       	brne	.-4      	; 0x964 <lcd_clrscrean+0xa>
 968:	00 c0       	rjmp	.+0      	; 0x96a <lcd_clrscrean+0x10>
 96a:	00 00       	nop
	dm(10);
}
 96c:	08 95       	ret

0000096e <lcd_move_cursor>:
void lcd_move_cursor(char row,char coloumn)
{
	char data;
	if (row>2||row<1||coloumn<1||coloumn>16)
 96e:	28 2f       	mov	r18, r24
 970:	21 50       	subi	r18, 0x01	; 1
 972:	22 30       	cpi	r18, 0x02	; 2
 974:	70 f4       	brcc	.+28     	; 0x992 <lcd_move_cursor+0x24>
 976:	66 23       	and	r22, r22
 978:	71 f0       	breq	.+28     	; 0x996 <lcd_move_cursor+0x28>
 97a:	61 31       	cpi	r22, 0x11	; 17
 97c:	70 f4       	brcc	.+28     	; 0x99a <lcd_move_cursor+0x2c>
	{
	data =0x80;
	}
else if (row==1)
 97e:	81 30       	cpi	r24, 0x01	; 1
 980:	19 f4       	brne	.+6      	; 0x988 <lcd_move_cursor+0x1a>
{
	data=0x80+coloumn-1;
 982:	96 2f       	mov	r25, r22
 984:	91 58       	subi	r25, 0x81	; 129
 986:	0a c0       	rjmp	.+20     	; 0x99c <lcd_move_cursor+0x2e>
}
else if (row==2)
 988:	82 30       	cpi	r24, 0x02	; 2
 98a:	41 f4       	brne	.+16     	; 0x99c <lcd_move_cursor+0x2e>
{
	data=0xc0+coloumn-1;
 98c:	96 2f       	mov	r25, r22
 98e:	91 54       	subi	r25, 0x41	; 65
 990:	05 c0       	rjmp	.+10     	; 0x99c <lcd_move_cursor+0x2e>
void lcd_move_cursor(char row,char coloumn)
{
	char data;
	if (row>2||row<1||coloumn<1||coloumn>16)
	{
	data =0x80;
 992:	90 e8       	ldi	r25, 0x80	; 128
 994:	03 c0       	rjmp	.+6      	; 0x99c <lcd_move_cursor+0x2e>
 996:	90 e8       	ldi	r25, 0x80	; 128
 998:	01 c0       	rjmp	.+2      	; 0x99c <lcd_move_cursor+0x2e>
 99a:	90 e8       	ldi	r25, 0x80	; 128
}
else if (row==2)
{
	data=0xc0+coloumn-1;
}
lcd_send_cmd(data);
 99c:	89 2f       	mov	r24, r25
 99e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_send_cmd>
 9a2:	8f ec       	ldi	r24, 0xCF	; 207
 9a4:	97 e0       	ldi	r25, 0x07	; 7
 9a6:	01 97       	sbiw	r24, 0x01	; 1
 9a8:	f1 f7       	brne	.-4      	; 0x9a6 <lcd_move_cursor+0x38>
 9aa:	00 c0       	rjmp	.+0      	; 0x9ac <lcd_move_cursor+0x3e>
 9ac:	00 00       	nop
dm(1);
}
 9ae:	08 95       	ret

000009b0 <main>:
	char str[10];
int main(void)
{
    unsigned short temp;

	lcd_init();
 9b0:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_init>
	lcd_send_cmd(disp_on_cursor_off);
 9b4:	8c e0       	ldi	r24, 0x0C	; 12
 9b6:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_send_cmd>
	adc_init();
 9ba:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
	/*set_bit(ADMUX,REFS0);
	set_bit(ADMUX,REFS1 );
	set_bit(ADMUX,MUX2);*/
	lcd_send_string("temp=");
 9be:	80 e6       	ldi	r24, 0x60	; 96
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 98 04 	call	0x930	; 0x930 <lcd_send_string>
	if (temp<10)
	{
	lcd_move_cursor(1,6);
	//lcd_send_char('0');
		//lcd_send_char('0');
		tostring(str,temp);
 9c6:	06 e8       	ldi	r16, 0x86	; 134
 9c8:	10 e0       	ldi	r17, 0x00	; 0
			lcd_send_char(0x20);
			lcd_send_char(0x20);


		lcd_move_cursor(2,1);
	lcd_send_string("lo temp");
 9ca:	0f 2e       	mov	r0, r31
 9cc:	f6 e6       	ldi	r31, 0x66	; 102
 9ce:	cf 2e       	mov	r12, r31
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	df 2e       	mov	r13, r31
 9d4:	f0 2d       	mov	r31, r0
		lcd_send_char(0x20);
		lcd_send_char(0x20);


			lcd_move_cursor(2,1);
			lcd_send_string("hi temp!!");
 9d6:	0f 2e       	mov	r0, r31
 9d8:	fc e7       	ldi	r31, 0x7C	; 124
 9da:	ef 2e       	mov	r14, r31
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	ff 2e       	mov	r15, r31
 9e0:	f0 2d       	mov	r31, r0


		lcd_move_cursor(2,1);
		
			
			lcd_send_string("Moderate temp");
 9e2:	0f 2e       	mov	r0, r31
 9e4:	fe e6       	ldi	r31, 0x6E	; 110
 9e6:	af 2e       	mov	r10, r31
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	bf 2e       	mov	r11, r31
 9ec:	f0 2d       	mov	r31, r0
	set_bit(ADMUX,MUX2);*/
	lcd_send_string("temp=");
	
	while(1)
    {
    temp=(adc_read()*.25);
 9ee:	0e 94 4f 00 	call	0x9e	; 0x9e <adc_read>
 9f2:	bc 01       	movw	r22, r24
 9f4:	80 e0       	ldi	r24, 0x00	; 0
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 c2 05 	call	0xb84	; 0xb84 <__floatunsisf>
 9fc:	20 e0       	ldi	r18, 0x00	; 0
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	40 e8       	ldi	r20, 0x80	; 128
 a02:	5e e3       	ldi	r21, 0x3E	; 62
 a04:	0e 94 28 06 	call	0xc50	; 0xc50 <__mulsf3>
 a08:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fixunssfsi>
 a0c:	dc 01       	movw	r26, r24
 a0e:	cb 01       	movw	r24, r22
 a10:	ec 01       	movw	r28, r24
	if (temp<10)
 a12:	8a 30       	cpi	r24, 0x0A	; 10
 a14:	91 05       	cpc	r25, r1
 a16:	b8 f5       	brcc	.+110    	; 0xa86 <main+0xd6>
	{
	lcd_move_cursor(1,6);
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	66 e0       	ldi	r22, 0x06	; 6
 a1c:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_move_cursor>
	//lcd_send_char('0');
		//lcd_send_char('0');
		tostring(str,temp);
 a20:	c8 01       	movw	r24, r16
 a22:	be 01       	movw	r22, r28
 a24:	0e 94 9f 03 	call	0x73e	; 0x73e <tostring>
		lcd_send_string(str);
 a28:	c8 01       	movw	r24, r16
 a2a:	0e 94 98 04 	call	0x930	; 0x930 <lcd_send_string>

		lcd_send_char(0xdf);
 a2e:	8f ed       	ldi	r24, 0xDF	; 223
 a30:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
			lcd_send_char('c');
 a34:	83 e6       	ldi	r24, 0x63	; 99
 a36:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
			lcd_send_char(0x20);
 a3a:	80 e2       	ldi	r24, 0x20	; 32
 a3c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
			lcd_send_char(0x20);
 a40:	80 e2       	ldi	r24, 0x20	; 32
 a42:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>


		lcd_move_cursor(2,1);
 a46:	82 e0       	ldi	r24, 0x02	; 2
 a48:	61 e0       	ldi	r22, 0x01	; 1
 a4a:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_move_cursor>
	lcd_send_string("lo temp");
 a4e:	c6 01       	movw	r24, r12
 a50:	0e 94 98 04 	call	0x930	; 0x930 <lcd_send_string>
	lcd_send_char(0x20);
 a54:	80 e2       	ldi	r24, 0x20	; 32
 a56:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
	lcd_send_char(0x20);
 a5a:	80 e2       	ldi	r24, 0x20	; 32
 a5c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
	lcd_send_char(0x20);
 a60:	80 e2       	ldi	r24, 0x20	; 32
 a62:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
	lcd_send_char(0x20);
 a66:	80 e2       	ldi	r24, 0x20	; 32
 a68:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
	lcd_send_char(0x20);
 a6c:	80 e2       	ldi	r24, 0x20	; 32
 a6e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
	lcd_send_char(0x20);
 a72:	80 e2       	ldi	r24, 0x20	; 32
 a74:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
	lcd_send_char(0x20);
 a78:	80 e2       	ldi	r24, 0x20	; 32
 a7a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
	lcd_send_char(0x20);
 a7e:	80 e2       	ldi	r24, 0x20	; 32
 a80:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
 a84:	b4 cf       	rjmp	.-152    	; 0x9ee <main+0x3e>

	}
	else if(temp<100)
 a86:	84 36       	cpi	r24, 0x64	; 100
 a88:	91 05       	cpc	r25, r1
 a8a:	28 f5       	brcc	.+74     	; 0xad6 <main+0x126>
	{
		lcd_move_cursor(1,6);
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	66 e0       	ldi	r22, 0x06	; 6
 a90:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_move_cursor>
		//lcd_send_char('0');
		//lcd_send_char('0');
		tostring(str,temp);
 a94:	c8 01       	movw	r24, r16
 a96:	be 01       	movw	r22, r28
 a98:	0e 94 9f 03 	call	0x73e	; 0x73e <tostring>
		lcd_send_string(str);
 a9c:	c8 01       	movw	r24, r16
 a9e:	0e 94 98 04 	call	0x930	; 0x930 <lcd_send_string>
		lcd_send_char(0xdf);
 aa2:	8f ed       	ldi	r24, 0xDF	; 223
 aa4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
		lcd_send_char('c');
 aa8:	83 e6       	ldi	r24, 0x63	; 99
 aaa:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
		lcd_send_char(0x20);
 aae:	80 e2       	ldi	r24, 0x20	; 32
 ab0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
		lcd_send_char(0x20);
 ab4:	80 e2       	ldi	r24, 0x20	; 32
 ab6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>


		lcd_move_cursor(2,1);
 aba:	82 e0       	ldi	r24, 0x02	; 2
 abc:	61 e0       	ldi	r22, 0x01	; 1
 abe:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_move_cursor>
		
			
			lcd_send_string("Moderate temp");
 ac2:	c5 01       	movw	r24, r10
 ac4:	0e 94 98 04 	call	0x930	; 0x930 <lcd_send_string>
lcd_send_char(0x20);
 ac8:	80 e2       	ldi	r24, 0x20	; 32
 aca:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
lcd_send_char(0x20);
 ace:	80 e2       	ldi	r24, 0x20	; 32
 ad0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
 ad4:	8c cf       	rjmp	.-232    	; 0x9ee <main+0x3e>


	}
	else
	{
		lcd_move_cursor(1,6);
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	66 e0       	ldi	r22, 0x06	; 6
 ada:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_move_cursor>
		//lcd_send_char('0');
		//lcd_send_char('0');
		tostring(str,temp);
 ade:	c8 01       	movw	r24, r16
 ae0:	be 01       	movw	r22, r28
 ae2:	0e 94 9f 03 	call	0x73e	; 0x73e <tostring>
		lcd_send_string(str);
 ae6:	c8 01       	movw	r24, r16
 ae8:	0e 94 98 04 	call	0x930	; 0x930 <lcd_send_string>
		
		lcd_send_char(0xdf);
 aec:	8f ed       	ldi	r24, 0xDF	; 223
 aee:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
		lcd_send_char('c');
 af2:	83 e6       	ldi	r24, 0x63	; 99
 af4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
		lcd_send_char(0x20);
 af8:	80 e2       	ldi	r24, 0x20	; 32
 afa:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
		lcd_send_char(0x20);
 afe:	80 e2       	ldi	r24, 0x20	; 32
 b00:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>


			lcd_move_cursor(2,1);
 b04:	82 e0       	ldi	r24, 0x02	; 2
 b06:	61 e0       	ldi	r22, 0x01	; 1
 b08:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_move_cursor>
			lcd_send_string("hi temp!!");
 b0c:	c7 01       	movw	r24, r14
 b0e:	0e 94 98 04 	call	0x930	; 0x930 <lcd_send_string>
			lcd_send_char(0x20);
 b12:	80 e2       	ldi	r24, 0x20	; 32
 b14:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
			lcd_send_char(0x20);
 b18:	80 e2       	ldi	r24, 0x20	; 32
 b1a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
			lcd_send_char(0x20);
 b1e:	80 e2       	ldi	r24, 0x20	; 32
 b20:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
			lcd_send_char(0x20);
 b24:	80 e2       	ldi	r24, 0x20	; 32
 b26:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_send_char>
 b2a:	61 cf       	rjmp	.-318    	; 0x9ee <main+0x3e>

00000b2c <__fixunssfsi>:
 b2c:	70 d0       	rcall	.+224    	; 0xc0e <__fp_splitA>
 b2e:	88 f0       	brcs	.+34     	; 0xb52 <__fixunssfsi+0x26>
 b30:	9f 57       	subi	r25, 0x7F	; 127
 b32:	90 f0       	brcs	.+36     	; 0xb58 <__fixunssfsi+0x2c>
 b34:	b9 2f       	mov	r27, r25
 b36:	99 27       	eor	r25, r25
 b38:	b7 51       	subi	r27, 0x17	; 23
 b3a:	a0 f0       	brcs	.+40     	; 0xb64 <__fixunssfsi+0x38>
 b3c:	d1 f0       	breq	.+52     	; 0xb72 <__fixunssfsi+0x46>
 b3e:	66 0f       	add	r22, r22
 b40:	77 1f       	adc	r23, r23
 b42:	88 1f       	adc	r24, r24
 b44:	99 1f       	adc	r25, r25
 b46:	1a f0       	brmi	.+6      	; 0xb4e <__fixunssfsi+0x22>
 b48:	ba 95       	dec	r27
 b4a:	c9 f7       	brne	.-14     	; 0xb3e <__fixunssfsi+0x12>
 b4c:	12 c0       	rjmp	.+36     	; 0xb72 <__fixunssfsi+0x46>
 b4e:	b1 30       	cpi	r27, 0x01	; 1
 b50:	81 f0       	breq	.+32     	; 0xb72 <__fixunssfsi+0x46>
 b52:	77 d0       	rcall	.+238    	; 0xc42 <__fp_zero>
 b54:	b1 e0       	ldi	r27, 0x01	; 1
 b56:	08 95       	ret
 b58:	74 c0       	rjmp	.+232    	; 0xc42 <__fp_zero>
 b5a:	67 2f       	mov	r22, r23
 b5c:	78 2f       	mov	r23, r24
 b5e:	88 27       	eor	r24, r24
 b60:	b8 5f       	subi	r27, 0xF8	; 248
 b62:	39 f0       	breq	.+14     	; 0xb72 <__fixunssfsi+0x46>
 b64:	b9 3f       	cpi	r27, 0xF9	; 249
 b66:	cc f3       	brlt	.-14     	; 0xb5a <__fixunssfsi+0x2e>
 b68:	86 95       	lsr	r24
 b6a:	77 95       	ror	r23
 b6c:	67 95       	ror	r22
 b6e:	b3 95       	inc	r27
 b70:	d9 f7       	brne	.-10     	; 0xb68 <__fixunssfsi+0x3c>
 b72:	3e f4       	brtc	.+14     	; 0xb82 <__fixunssfsi+0x56>
 b74:	90 95       	com	r25
 b76:	80 95       	com	r24
 b78:	70 95       	com	r23
 b7a:	61 95       	neg	r22
 b7c:	7f 4f       	sbci	r23, 0xFF	; 255
 b7e:	8f 4f       	sbci	r24, 0xFF	; 255
 b80:	9f 4f       	sbci	r25, 0xFF	; 255
 b82:	08 95       	ret

00000b84 <__floatunsisf>:
 b84:	e8 94       	clt
 b86:	09 c0       	rjmp	.+18     	; 0xb9a <__floatsisf+0x12>

00000b88 <__floatsisf>:
 b88:	97 fb       	bst	r25, 7
 b8a:	3e f4       	brtc	.+14     	; 0xb9a <__floatsisf+0x12>
 b8c:	90 95       	com	r25
 b8e:	80 95       	com	r24
 b90:	70 95       	com	r23
 b92:	61 95       	neg	r22
 b94:	7f 4f       	sbci	r23, 0xFF	; 255
 b96:	8f 4f       	sbci	r24, 0xFF	; 255
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	99 23       	and	r25, r25
 b9c:	a9 f0       	breq	.+42     	; 0xbc8 <__floatsisf+0x40>
 b9e:	f9 2f       	mov	r31, r25
 ba0:	96 e9       	ldi	r25, 0x96	; 150
 ba2:	bb 27       	eor	r27, r27
 ba4:	93 95       	inc	r25
 ba6:	f6 95       	lsr	r31
 ba8:	87 95       	ror	r24
 baa:	77 95       	ror	r23
 bac:	67 95       	ror	r22
 bae:	b7 95       	ror	r27
 bb0:	f1 11       	cpse	r31, r1
 bb2:	f8 cf       	rjmp	.-16     	; 0xba4 <__floatsisf+0x1c>
 bb4:	fa f4       	brpl	.+62     	; 0xbf4 <__floatsisf+0x6c>
 bb6:	bb 0f       	add	r27, r27
 bb8:	11 f4       	brne	.+4      	; 0xbbe <__floatsisf+0x36>
 bba:	60 ff       	sbrs	r22, 0
 bbc:	1b c0       	rjmp	.+54     	; 0xbf4 <__floatsisf+0x6c>
 bbe:	6f 5f       	subi	r22, 0xFF	; 255
 bc0:	7f 4f       	sbci	r23, 0xFF	; 255
 bc2:	8f 4f       	sbci	r24, 0xFF	; 255
 bc4:	9f 4f       	sbci	r25, 0xFF	; 255
 bc6:	16 c0       	rjmp	.+44     	; 0xbf4 <__floatsisf+0x6c>
 bc8:	88 23       	and	r24, r24
 bca:	11 f0       	breq	.+4      	; 0xbd0 <__floatsisf+0x48>
 bcc:	96 e9       	ldi	r25, 0x96	; 150
 bce:	11 c0       	rjmp	.+34     	; 0xbf2 <__floatsisf+0x6a>
 bd0:	77 23       	and	r23, r23
 bd2:	21 f0       	breq	.+8      	; 0xbdc <__floatsisf+0x54>
 bd4:	9e e8       	ldi	r25, 0x8E	; 142
 bd6:	87 2f       	mov	r24, r23
 bd8:	76 2f       	mov	r23, r22
 bda:	05 c0       	rjmp	.+10     	; 0xbe6 <__floatsisf+0x5e>
 bdc:	66 23       	and	r22, r22
 bde:	71 f0       	breq	.+28     	; 0xbfc <__floatsisf+0x74>
 be0:	96 e8       	ldi	r25, 0x86	; 134
 be2:	86 2f       	mov	r24, r22
 be4:	70 e0       	ldi	r23, 0x00	; 0
 be6:	60 e0       	ldi	r22, 0x00	; 0
 be8:	2a f0       	brmi	.+10     	; 0xbf4 <__floatsisf+0x6c>
 bea:	9a 95       	dec	r25
 bec:	66 0f       	add	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	da f7       	brpl	.-10     	; 0xbea <__floatsisf+0x62>
 bf4:	88 0f       	add	r24, r24
 bf6:	96 95       	lsr	r25
 bf8:	87 95       	ror	r24
 bfa:	97 f9       	bld	r25, 7
 bfc:	08 95       	ret

00000bfe <__fp_split3>:
 bfe:	57 fd       	sbrc	r21, 7
 c00:	90 58       	subi	r25, 0x80	; 128
 c02:	44 0f       	add	r20, r20
 c04:	55 1f       	adc	r21, r21
 c06:	59 f0       	breq	.+22     	; 0xc1e <__fp_splitA+0x10>
 c08:	5f 3f       	cpi	r21, 0xFF	; 255
 c0a:	71 f0       	breq	.+28     	; 0xc28 <__fp_splitA+0x1a>
 c0c:	47 95       	ror	r20

00000c0e <__fp_splitA>:
 c0e:	88 0f       	add	r24, r24
 c10:	97 fb       	bst	r25, 7
 c12:	99 1f       	adc	r25, r25
 c14:	61 f0       	breq	.+24     	; 0xc2e <__fp_splitA+0x20>
 c16:	9f 3f       	cpi	r25, 0xFF	; 255
 c18:	79 f0       	breq	.+30     	; 0xc38 <__fp_splitA+0x2a>
 c1a:	87 95       	ror	r24
 c1c:	08 95       	ret
 c1e:	12 16       	cp	r1, r18
 c20:	13 06       	cpc	r1, r19
 c22:	14 06       	cpc	r1, r20
 c24:	55 1f       	adc	r21, r21
 c26:	f2 cf       	rjmp	.-28     	; 0xc0c <__fp_split3+0xe>
 c28:	46 95       	lsr	r20
 c2a:	f1 df       	rcall	.-30     	; 0xc0e <__fp_splitA>
 c2c:	08 c0       	rjmp	.+16     	; 0xc3e <__fp_splitA+0x30>
 c2e:	16 16       	cp	r1, r22
 c30:	17 06       	cpc	r1, r23
 c32:	18 06       	cpc	r1, r24
 c34:	99 1f       	adc	r25, r25
 c36:	f1 cf       	rjmp	.-30     	; 0xc1a <__fp_splitA+0xc>
 c38:	86 95       	lsr	r24
 c3a:	71 05       	cpc	r23, r1
 c3c:	61 05       	cpc	r22, r1
 c3e:	08 94       	sec
 c40:	08 95       	ret

00000c42 <__fp_zero>:
 c42:	e8 94       	clt

00000c44 <__fp_szero>:
 c44:	bb 27       	eor	r27, r27
 c46:	66 27       	eor	r22, r22
 c48:	77 27       	eor	r23, r23
 c4a:	cb 01       	movw	r24, r22
 c4c:	97 f9       	bld	r25, 7
 c4e:	08 95       	ret

00000c50 <__mulsf3>:
 c50:	0b d0       	rcall	.+22     	; 0xc68 <__mulsf3x>
 c52:	78 c0       	rjmp	.+240    	; 0xd44 <__fp_round>
 c54:	69 d0       	rcall	.+210    	; 0xd28 <__fp_pscA>
 c56:	28 f0       	brcs	.+10     	; 0xc62 <__mulsf3+0x12>
 c58:	6e d0       	rcall	.+220    	; 0xd36 <__fp_pscB>
 c5a:	18 f0       	brcs	.+6      	; 0xc62 <__mulsf3+0x12>
 c5c:	95 23       	and	r25, r21
 c5e:	09 f0       	breq	.+2      	; 0xc62 <__mulsf3+0x12>
 c60:	5a c0       	rjmp	.+180    	; 0xd16 <__fp_inf>
 c62:	5f c0       	rjmp	.+190    	; 0xd22 <__fp_nan>
 c64:	11 24       	eor	r1, r1
 c66:	ee cf       	rjmp	.-36     	; 0xc44 <__fp_szero>

00000c68 <__mulsf3x>:
 c68:	ca df       	rcall	.-108    	; 0xbfe <__fp_split3>
 c6a:	a0 f3       	brcs	.-24     	; 0xc54 <__mulsf3+0x4>

00000c6c <__mulsf3_pse>:
 c6c:	95 9f       	mul	r25, r21
 c6e:	d1 f3       	breq	.-12     	; 0xc64 <__mulsf3+0x14>
 c70:	95 0f       	add	r25, r21
 c72:	50 e0       	ldi	r21, 0x00	; 0
 c74:	55 1f       	adc	r21, r21
 c76:	62 9f       	mul	r22, r18
 c78:	f0 01       	movw	r30, r0
 c7a:	72 9f       	mul	r23, r18
 c7c:	bb 27       	eor	r27, r27
 c7e:	f0 0d       	add	r31, r0
 c80:	b1 1d       	adc	r27, r1
 c82:	63 9f       	mul	r22, r19
 c84:	aa 27       	eor	r26, r26
 c86:	f0 0d       	add	r31, r0
 c88:	b1 1d       	adc	r27, r1
 c8a:	aa 1f       	adc	r26, r26
 c8c:	64 9f       	mul	r22, r20
 c8e:	66 27       	eor	r22, r22
 c90:	b0 0d       	add	r27, r0
 c92:	a1 1d       	adc	r26, r1
 c94:	66 1f       	adc	r22, r22
 c96:	82 9f       	mul	r24, r18
 c98:	22 27       	eor	r18, r18
 c9a:	b0 0d       	add	r27, r0
 c9c:	a1 1d       	adc	r26, r1
 c9e:	62 1f       	adc	r22, r18
 ca0:	73 9f       	mul	r23, r19
 ca2:	b0 0d       	add	r27, r0
 ca4:	a1 1d       	adc	r26, r1
 ca6:	62 1f       	adc	r22, r18
 ca8:	83 9f       	mul	r24, r19
 caa:	a0 0d       	add	r26, r0
 cac:	61 1d       	adc	r22, r1
 cae:	22 1f       	adc	r18, r18
 cb0:	74 9f       	mul	r23, r20
 cb2:	33 27       	eor	r19, r19
 cb4:	a0 0d       	add	r26, r0
 cb6:	61 1d       	adc	r22, r1
 cb8:	23 1f       	adc	r18, r19
 cba:	84 9f       	mul	r24, r20
 cbc:	60 0d       	add	r22, r0
 cbe:	21 1d       	adc	r18, r1
 cc0:	82 2f       	mov	r24, r18
 cc2:	76 2f       	mov	r23, r22
 cc4:	6a 2f       	mov	r22, r26
 cc6:	11 24       	eor	r1, r1
 cc8:	9f 57       	subi	r25, 0x7F	; 127
 cca:	50 40       	sbci	r21, 0x00	; 0
 ccc:	8a f0       	brmi	.+34     	; 0xcf0 <__mulsf3_pse+0x84>
 cce:	e1 f0       	breq	.+56     	; 0xd08 <__mulsf3_pse+0x9c>
 cd0:	88 23       	and	r24, r24
 cd2:	4a f0       	brmi	.+18     	; 0xce6 <__mulsf3_pse+0x7a>
 cd4:	ee 0f       	add	r30, r30
 cd6:	ff 1f       	adc	r31, r31
 cd8:	bb 1f       	adc	r27, r27
 cda:	66 1f       	adc	r22, r22
 cdc:	77 1f       	adc	r23, r23
 cde:	88 1f       	adc	r24, r24
 ce0:	91 50       	subi	r25, 0x01	; 1
 ce2:	50 40       	sbci	r21, 0x00	; 0
 ce4:	a9 f7       	brne	.-22     	; 0xcd0 <__mulsf3_pse+0x64>
 ce6:	9e 3f       	cpi	r25, 0xFE	; 254
 ce8:	51 05       	cpc	r21, r1
 cea:	70 f0       	brcs	.+28     	; 0xd08 <__mulsf3_pse+0x9c>
 cec:	14 c0       	rjmp	.+40     	; 0xd16 <__fp_inf>
 cee:	aa cf       	rjmp	.-172    	; 0xc44 <__fp_szero>
 cf0:	5f 3f       	cpi	r21, 0xFF	; 255
 cf2:	ec f3       	brlt	.-6      	; 0xcee <__mulsf3_pse+0x82>
 cf4:	98 3e       	cpi	r25, 0xE8	; 232
 cf6:	dc f3       	brlt	.-10     	; 0xcee <__mulsf3_pse+0x82>
 cf8:	86 95       	lsr	r24
 cfa:	77 95       	ror	r23
 cfc:	67 95       	ror	r22
 cfe:	b7 95       	ror	r27
 d00:	f7 95       	ror	r31
 d02:	e7 95       	ror	r30
 d04:	9f 5f       	subi	r25, 0xFF	; 255
 d06:	c1 f7       	brne	.-16     	; 0xcf8 <__mulsf3_pse+0x8c>
 d08:	fe 2b       	or	r31, r30
 d0a:	88 0f       	add	r24, r24
 d0c:	91 1d       	adc	r25, r1
 d0e:	96 95       	lsr	r25
 d10:	87 95       	ror	r24
 d12:	97 f9       	bld	r25, 7
 d14:	08 95       	ret

00000d16 <__fp_inf>:
 d16:	97 f9       	bld	r25, 7
 d18:	9f 67       	ori	r25, 0x7F	; 127
 d1a:	80 e8       	ldi	r24, 0x80	; 128
 d1c:	70 e0       	ldi	r23, 0x00	; 0
 d1e:	60 e0       	ldi	r22, 0x00	; 0
 d20:	08 95       	ret

00000d22 <__fp_nan>:
 d22:	9f ef       	ldi	r25, 0xFF	; 255
 d24:	80 ec       	ldi	r24, 0xC0	; 192
 d26:	08 95       	ret

00000d28 <__fp_pscA>:
 d28:	00 24       	eor	r0, r0
 d2a:	0a 94       	dec	r0
 d2c:	16 16       	cp	r1, r22
 d2e:	17 06       	cpc	r1, r23
 d30:	18 06       	cpc	r1, r24
 d32:	09 06       	cpc	r0, r25
 d34:	08 95       	ret

00000d36 <__fp_pscB>:
 d36:	00 24       	eor	r0, r0
 d38:	0a 94       	dec	r0
 d3a:	12 16       	cp	r1, r18
 d3c:	13 06       	cpc	r1, r19
 d3e:	14 06       	cpc	r1, r20
 d40:	05 06       	cpc	r0, r21
 d42:	08 95       	ret

00000d44 <__fp_round>:
 d44:	09 2e       	mov	r0, r25
 d46:	03 94       	inc	r0
 d48:	00 0c       	add	r0, r0
 d4a:	11 f4       	brne	.+4      	; 0xd50 <__fp_round+0xc>
 d4c:	88 23       	and	r24, r24
 d4e:	52 f0       	brmi	.+20     	; 0xd64 <__fp_round+0x20>
 d50:	bb 0f       	add	r27, r27
 d52:	40 f4       	brcc	.+16     	; 0xd64 <__fp_round+0x20>
 d54:	bf 2b       	or	r27, r31
 d56:	11 f4       	brne	.+4      	; 0xd5c <__fp_round+0x18>
 d58:	60 ff       	sbrs	r22, 0
 d5a:	04 c0       	rjmp	.+8      	; 0xd64 <__fp_round+0x20>
 d5c:	6f 5f       	subi	r22, 0xFF	; 255
 d5e:	7f 4f       	sbci	r23, 0xFF	; 255
 d60:	8f 4f       	sbci	r24, 0xFF	; 255
 d62:	9f 4f       	sbci	r25, 0xFF	; 255
 d64:	08 95       	ret

00000d66 <__divmodhi4>:
 d66:	97 fb       	bst	r25, 7
 d68:	09 2e       	mov	r0, r25
 d6a:	07 26       	eor	r0, r23
 d6c:	0a d0       	rcall	.+20     	; 0xd82 <__divmodhi4_neg1>
 d6e:	77 fd       	sbrc	r23, 7
 d70:	04 d0       	rcall	.+8      	; 0xd7a <__divmodhi4_neg2>
 d72:	0c d0       	rcall	.+24     	; 0xd8c <__udivmodhi4>
 d74:	06 d0       	rcall	.+12     	; 0xd82 <__divmodhi4_neg1>
 d76:	00 20       	and	r0, r0
 d78:	1a f4       	brpl	.+6      	; 0xd80 <__divmodhi4_exit>

00000d7a <__divmodhi4_neg2>:
 d7a:	70 95       	com	r23
 d7c:	61 95       	neg	r22
 d7e:	7f 4f       	sbci	r23, 0xFF	; 255

00000d80 <__divmodhi4_exit>:
 d80:	08 95       	ret

00000d82 <__divmodhi4_neg1>:
 d82:	f6 f7       	brtc	.-4      	; 0xd80 <__divmodhi4_exit>
 d84:	90 95       	com	r25
 d86:	81 95       	neg	r24
 d88:	9f 4f       	sbci	r25, 0xFF	; 255
 d8a:	08 95       	ret

00000d8c <__udivmodhi4>:
 d8c:	aa 1b       	sub	r26, r26
 d8e:	bb 1b       	sub	r27, r27
 d90:	51 e1       	ldi	r21, 0x11	; 17
 d92:	07 c0       	rjmp	.+14     	; 0xda2 <__udivmodhi4_ep>

00000d94 <__udivmodhi4_loop>:
 d94:	aa 1f       	adc	r26, r26
 d96:	bb 1f       	adc	r27, r27
 d98:	a6 17       	cp	r26, r22
 d9a:	b7 07       	cpc	r27, r23
 d9c:	10 f0       	brcs	.+4      	; 0xda2 <__udivmodhi4_ep>
 d9e:	a6 1b       	sub	r26, r22
 da0:	b7 0b       	sbc	r27, r23

00000da2 <__udivmodhi4_ep>:
 da2:	88 1f       	adc	r24, r24
 da4:	99 1f       	adc	r25, r25
 da6:	5a 95       	dec	r21
 da8:	a9 f7       	brne	.-22     	; 0xd94 <__udivmodhi4_loop>
 daa:	80 95       	com	r24
 dac:	90 95       	com	r25
 dae:	bc 01       	movw	r22, r24
 db0:	cd 01       	movw	r24, r26
 db2:	08 95       	ret

00000db4 <_exit>:
 db4:	f8 94       	cli

00000db6 <__stop_program>:
 db6:	ff cf       	rjmp	.-2      	; 0xdb6 <__stop_program>
